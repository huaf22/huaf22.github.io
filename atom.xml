<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.afluy.site/"/>
  <updated>2016-08-11T13:18:41.000Z</updated>
  <id>http://www.afluy.site/</id>
  
  <author>
    <name>Afluy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/08/11/%5Bios%E7%AC%94%E8%AE%B0%5Dswift%E4%B8%AD%E7%9A%84optional%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.afluy.site/2016/08/11/[ios笔记]swift中的optional类型/</id>
    <published>2016-08-11T12:28:06.000Z</published>
    <updated>2016-08-11T13:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS笔记-Swift中的Optional类型-可选类型"><a href="#iOS笔记-Swift中的Optional类型-可选类型" class="headerlink" title="[iOS笔记]Swift中的Optional类型 (可选类型)"></a>[iOS笔记]Swift中的Optional类型 (可选类型)</h1><h3 id="Optional类型表示-有值-没有值"><a href="#Optional类型表示-有值-没有值" class="headerlink" title="Optional类型表示: 有值 / 没有值"></a>Optional类型表示: 有值 / 没有值</h3><p>在Objective-C中并没有Optional类型, 只有nil,并且nil只能用于表示对象类型无值,</p>
<p>并不能用于基础类型(int, float),枚举和结构体,基础类型需要返回类似NSNotFound的特殊值来表示无值,</p>
<p>所以在Swift中定义了Optinal类型来表示各种类型的无值状态,并规定了nil不能用于非可选的常量和变量,只能用于Optinal类型</p>
<h3 id="先看一下基本的用法"><a href="#先看一下基本的用法" class="headerlink" title="先看一下基本的用法:"></a>先看一下基本的用法:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var serverResponseCode: Int? = nil</div><div class="line">// serverResponseCode 现在不包含值</div><div class="line">serverResponseCode = 404// serverResponseCode 包含一个可选的 Int 值 404 </div><div class="line">Int? 表示serverResponseCode可以是有值的也可以是无值的</div><div class="line"></div><div class="line">var surveyAnswer: String?//surveyAnswer 被自动设置为 nil</div></pre></td></tr></table></figure>
<h3 id="在if语法中的用法"><a href="#在if语法中的用法" class="headerlink" title="在if语法中的用法"></a>在if语法中的用法</h3><p>使用 if 语句和 nil 来判断一个Optional类型是否有值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var convertedNumber: Int? </div><div class="line"></div><div class="line">if convertedNumber != nil &#123;     print(&quot;convertedNumber contains some integer value.&quot;)&#125;</div></pre></td></tr></table></figure>
<h3 id="可选绑定-optional-binding"><a href="#可选绑定-optional-binding" class="headerlink" title="可选绑定( optional binding )"></a>可选绑定( optional binding )</h3><p>使用optional binding来判断optional类型是否有值,并且如果有值就把值赋给一个常量或者临时变量。</p>
<p>optional binding可以用在 if 和  while 语句中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if let constantName = someOptional &#123;     print(&quot;get the value: \(constantName)&quot;)&#125;</div><div class="line">//如果someOptional这个optional类型有值,创建一个叫做constantName的常量并将someOptional包含的值赋给它。</div><div class="line">//并且因为constantName已经被optional类型包含的值初始化过,所以不需要再使用 ! 后缀来获取它的值。</div></pre></td></tr></table></figure>
<h3 id="强制解析-解包-forced-unwrapping"><a href="#强制解析-解包-forced-unwrapping" class="headerlink" title="强制解析/解包 ( forced unwrapping )"></a>强制解析/解包 ( forced unwrapping )</h3><p>当确定可选类型确实包含值之后,可以在可选的名字后面加一个感叹号( ! )来获取值;</p>
<p>当Option == nil时,使用 ! 来获取会导致运行时错误。所以使用 ! 来强制解析值之前,一定要确定Option类型不是nil的</p>
<h3 id="隐式解析可选类型-implicitly-unwrapped-optionals"><a href="#隐式解析可选类型-implicitly-unwrapped-optionals" class="headerlink" title="隐式解析可选类型 ( implicitly unwrapped optionals )"></a>隐式解析可选类型 ( implicitly unwrapped optionals )</h3><p>有时候在编写程序中,一个optional类型第一次被赋值后,可以确定它以后总会有值,</p>
<p>在这种情况下,使用它时每次都还需要判断和解包optional类型是非常低效的,因为可以确定它总会有值,</p>
<p>所以Swift中定义了一个隐式解析可选类型,它在使用时可以自动解析;</p>
<p>把( String? )改成感叹号( String! )就可以声明一个隐式解析可选类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let possibleString: String? = &quot;An optional string.&quot;let forcedString: String = possibleString! // 需要惊叹号来获取值</div><div class="line">let assumedString: String! = &quot;An implicitly unwrapped optional string.&quot; </div><div class="line">let implicitString: String = assumedString // 不需要感叹号</div></pre></td></tr></table></figure>
<p>但是需要注意:</p>
<ul>
<li><p>如果你在隐式解析可选类型没有值的时候取值,会触发运行时错误,</p>
<p>这和你在无值的普通Optional类型后面加一个惊叹号的情景一样;</p>
</li>
</ul>
<ul>
<li><p>如果一个变量以后还可能变成 nil 的话,不要使用隐式解析可选类型;</p>
</li>
<li><p>并且如果需要在变量的生命周期中判断是否 是 nil 的话,请使用普通可选类型;</p>
</li>
</ul>
<h4 id="可以理解为隐式解析可选类型用于声明初始化时可能为nil-但之后会立刻被赋值-并且不会再变成nil的Optional类型对象"><a href="#可以理解为隐式解析可选类型用于声明初始化时可能为nil-但之后会立刻被赋值-并且不会再变成nil的Optional类型对象" class="headerlink" title="可以理解为隐式解析可选类型用于声明初始化时可能为nil,但之后会立刻被赋值,并且不会再变成nil的Optional类型对象"></a>可以理解为隐式解析可选类型用于声明初始化时可能为nil,但之后会立刻被赋值,并且不会再变成nil的Optional类型对象</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS笔记-Swift中的Optional类型-可选类型&quot;&gt;&lt;a href=&quot;#iOS笔记-Swift中的Optional类型-可选类型&quot; class=&quot;headerlink&quot; title=&quot;[iOS笔记]Swift中的Optional类型 (可选类型)&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
</feed>
