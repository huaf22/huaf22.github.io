<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.afluy.site/"/>
  <updated>2016-11-25T13:00:15.000Z</updated>
  <id>http://www.afluy.site/</id>
  
  <author>
    <name>Afluy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%E5%AF%B9%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://www.afluy.site/2016/11/25/对微信小程序的一些问题/</id>
    <published>2016-11-25T12:57:59.000Z</published>
    <updated>2016-11-25T13:00:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念–对微信小程序的一些问题"><a href="#碎碎念–对微信小程序的一些问题" class="headerlink" title="碎碎念–对微信小程序的一些问题"></a>碎碎念–对微信小程序的一些问题</h2><ul>
<li><p>JS和 HTML写出来的小程序功能上是否够用，交互上是否够流畅，是否满足用户的基本需求？</p>
</li>
<li><p>开发流程上，小程序的调试测试和发布是否方便，是否支持自动化打包，自动化测试和自动化发布？</p>
</li>
<li><p>微信对小程序是否要审核，是否有违规下架的措施？</p>
</li>
<li><p>现在只能通过微信的扫一扫和搜索来获取小程序，微信不提供类似于豌豆荚和APPSTORE的推广平台，也就没有分类浏览和竞价排名，那么就需要自己通过各个渠道做线上和线下的推广，综合推广成本是否比 Native  APP 低很多？是否会出现第三方的小程序应用市场？</p>
</li>
<li><p>哪些类型的应用适合开发成小程序？购物？订餐？租房？打车？旅游？</p>
</li>
</ul>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;碎碎念–对微信小程序的一些问题&quot;&gt;&lt;a href=&quot;#碎碎念–对微信小程序的一些问题&quot; class=&quot;headerlink&quot; title=&quot;碎碎念–对微信小程序的一些问题&quot;&gt;&lt;/a&gt;碎碎念–对微信小程序的一些问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JS和 HTML写出来的小程序功能上是否够用，交互上是否够流畅，是否满足用户的基本需求？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发流程上，小程序的调试测试和发布是否方便，是否支持自动化打包，自动化测试和自动化发布？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;微信对小程序是否要审核，是否有违规下架的措施？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在只能通过微信的扫一扫和搜索来获取小程序，微信不提供类似于豌豆荚和APPSTORE的推广平台，也就没有分类浏览和竞价排名，那么就需要自己通过各个渠道做线上和线下的推广，综合推广成本是否比 Native  APP 低很多？是否会出现第三方的小程序应用市场？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哪些类型的应用适合开发成小程序？购物？订餐？租房？打车？旅游？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/Swift-3-0-%E5%8F%98%E6%9B%B4%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.afluy.site/2016/11/25/Swift-3-0-变更小结/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swift-3-0-变更小结"><a href="#Swift-3-0-变更小结" class="headerlink" title="Swift-3-0-变更小结"></a>Swift-3-0-变更小结</h2><a id="more"></a>
<p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/RevisionHistory.html" target="_blank" rel="external">Apple 官网 Swift 3.0 版本变更文档</a></p>
<h3 id="新增访问符关键字-open-fileprivate"><a href="#新增访问符关键字-open-fileprivate" class="headerlink" title="新增访问符关键字: open, fileprivate"></a>新增访问符关键字: open, fileprivate</h3><p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41-ID3" target="_blank" rel="external">Apple 官网解释</a><br><strong>open</strong>:  公开访问接口, 类和成员变量是可以被模块内外  <strong>override</strong><br><strong>public</strong>:  公开访问接口, 但是只能在模块内被 <strong>override</strong><br><strong>internal</strong>: 只在模块中访问<br><strong>fileprivate</strong>: 只在当前文件中访问<br><strong>private</strong>: 只在当前文件中访问, 并且其 extension 里也不能访问</p>
<p>所以使用 <strong>open</strong> 访问符时需要考虑可能被模块外的代码复写</p>
<h3 id="方法签名和调用的变更"><a href="#方法签名和调用的变更" class="headerlink" title="方法签名和调用的变更"></a>方法签名和调用的变更</h3><p>举例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">     enum PullToRefreshState &#123;</div><div class="line">-        case Pulling</div><div class="line">-        case Triggered</div><div class="line">-        case Refreshing</div><div class="line">-        case Stop</div><div class="line">+        case pulling</div><div class="line">+        case triggered</div><div class="line">+        case refreshing</div><div class="line">+        case stop</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>声明枚举中的case需要小写开头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool &#123;</div><div class="line">+    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool &#123;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-        self.posterImageView.contentMode = .ScaleAspectFill</div><div class="line">-        self.posterImageView.frame = CGRectMake(0, 0, self.view.wly_width, BarViewHeight);</div><div class="line">+        self.posterImageView.contentMode = .scaleAspectFill</div><div class="line">+        self.posterImageView.frame = CGRect(x: 0, y: 0, width: self.view.wly_width, height: BarViewHeight);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-        self.customBar.frame = CGRectMake(0, 0, self.view.wly_width, BarViewHeight);</div><div class="line">+        self.customBar.frame = CGRect(x: 0, y: 0, width: self.view.wly_width, height: BarViewHeight);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-        self.tableView.registerClass(WLYArticleTableViewCell.self , forCellReuseIdentifier: WLYArticleTableViewCell.identifier)</div><div class="line">+        self.tableView.register(WLYArticleTableViewCell.self , forCellReuseIdentifier: WLYArticleTableViewCell.identifier)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell &#123;</div><div class="line">-        let cell = tableView.dequeueReusableCellWithIdentifier(WLYArticleTableViewCell.identifier) as! WLYArticleTableViewCell</div><div class="line">+    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;</div><div class="line">+        let cell = tableView.dequeueReusableCell(withIdentifier: WLYArticleTableViewCell.identifier) as! WLYArticleTableViewCell</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-        tableView.deselectRowAtIndexPath(indexPath, animated: true)</div><div class="line">+        tableView.deselectRow(at: indexPath, animated: true)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-        self.collectionView.scrollEnabled = false</div><div class="line">-        self.collectionView.backgroundColor = UIColor.whiteColor()</div><div class="line">-        self.collectionView.registerClass(WLYArticleDetailCell.self, forCellWithReuseIdentifier: WLYArticleDetailCell.identifier)</div><div class="line">+        self.collectionView.isScrollEnabled = false</div><div class="line">+        self.collectionView.backgroundColor = UIColor.white</div><div class="line">+        self.collectionView.register(WLYArticleDetailCell.self, forCellWithReuseIdentifier: WLYArticleDetailCell.identifier)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-        self.arrow.center = CGPointMake(self.frame.size.width / 2, self.frame.size.height / 2)</div><div class="line">-        self.arrow.frame = CGRectOffset(arrow.frame, 0, 0)</div><div class="line">+        self.arrow.center = CGPoint(x: self.frame.size.width / 2, y: self.frame.size.height / 2)</div><div class="line">+        self.arrow.frame = arrow.frame.offsetBy(dx: 0, dy: 0)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-        self.titleLabel.font = UIFont.systemFontOfSize(15)</div><div class="line">+        self.titleLabel.font = UIFont.systemFont(ofSize: 15)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-                    self.themeArray?.insert(self.homePageTheme(), atIndex: 0)</div><div class="line">+                    self.themeArray?.insert(self.homePageTheme(), at: 0)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-        self.stateButton.setTitle(&quot;夜间&quot;, forState: .Normal)</div><div class="line">-        self.stateButton.setTitleColor(UIColor.wly_darkTextColor, forState: .Normal)</div><div class="line">-        self.stateButton.setImage(UIImage(named: &quot;Menu_Dark&quot;), forState: .Normal)</div><div class="line">-        self.stateButton.titleLabel?.font = UIFont.systemFontOfSize(13)</div><div class="line">+        self.stateButton.setTitle(&quot;夜间&quot;, for: UIControlState())</div><div class="line">+        self.stateButton.setTitleColor(UIColor.wly_darkTextColor, for: UIControlState())</div><div class="line">+        self.stateButton.setImage(UIImage(named: &quot;Menu_Dark&quot;), for: UIControlState())</div><div class="line">+        self.stateButton.titleLabel?.font = UIFont.systemFont(ofSize: 13)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-            guard let hexString: String = rgba.substringFromIndex(rgba.startIndex.advancedBy(1)),</div><div class="line"></div><div class="line">+            guard let hexString: String = rgba.substring(from: rgba.characters.index(rgba.startIndex, offsetBy: 1)),</div></pre></td></tr></table></figure>
<h4 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h4><p>GCD 使用了面向对象的方式调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-            let time = dispatch_time(DISPATCH_TIME_NOW, (Int64)(3 * NSEC_PER_SEC))</div><div class="line">-            dispatch_after(time, dispatch_get_main_queue()) &#123;</div><div class="line">+            let time = DispatchTime.now() + Double((Int64)(3 * NSEC_PER_SEC)) / Double(NSEC_PER_SEC)</div><div class="line">+            DispatchQueue.main.asyncAfter(deadline: time) &#123;</div></pre></td></tr></table></figure></p>
<h4 id="Block-escaping-amp-amp-autoclosure"><a href="#Block-escaping-amp-amp-autoclosure" class="headerlink" title="Block: @escaping &amp;&amp; @autoclosure"></a>Block: @escaping &amp;&amp; @autoclosure</h4><p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID546" target="_blank" rel="external">Apple 官网介绍</a></p>
<ul>
<li>当闭包作为参数传入一个方法, 并且该闭包是在方法返回后才被调用, 我们称为闭包的”逃逸”,需要添加 @escaping 标识, 否则编译器会报错</li>
<li>当使用了@escaping标识了一个闭包时, 必须在闭包中明确地引用self</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-    static func requestLatestArticles(completion: (WLYDailyArticle?, NSError?) -&gt; Void) &#123;</div><div class="line">+    static func requestLatestArticles(_ completion: @escaping (WLYDailyArticle?, NSError?) -&gt; Void) &#123;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Swift-3-0-变更小结&quot;&gt;&lt;a href=&quot;#Swift-3-0-变更小结&quot; class=&quot;headerlink&quot; title=&quot;Swift-3-0-变更小结&quot;&gt;&lt;/a&gt;Swift-3-0-变更小结&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BRxJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5D-Map-%E5%92%8C-FlatMap-%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.afluy.site/2016/11/25/[RxJava学习笔记]-Map-和-FlatMap-源码实现解析/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxJava学习笔记-Map-和-FlatMap-源码实现解析"><a href="#RxJava学习笔记-Map-和-FlatMap-源码实现解析" class="headerlink" title="[RxJava学习笔记]-Map-和-FlatMap-源码实现解析"></a>[RxJava学习笔记]-Map-和-FlatMap-源码实现解析</h2><a id="more"></a>
<h2 id="Map方法"><a href="#Map方法" class="headerlink" title="Map方法"></a>Map方法</h2><p><a href="http://reactivex.io/documentation/operators/map.html" target="_blank" rel="external">官网介绍</a></p>
<h4 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">//把传入的参数转化之后返回另一个对象</div><div class="line">Observable.just(&quot;images/logo.png&quot;) // 输入类型 String </div><div class="line">.map(new Func1&lt;String, Bitmap&gt;() &#123; </div><div class="line">    @override </div><div class="line">    public Bitmap call(String path) &#123; // 参数类型 String </div><div class="line">      return getBitmap(path); // 返回类型 Bitmap</div><div class="line">   &#125; </div><div class="line">&#125;) </div><div class="line">.subscribe(new Action1&lt;Bitmap&gt;() &#123;</div><div class="line">    @override </div><div class="line">    public void call(Bitmap bitmap) &#123; // 参数类型Bitmap</div><div class="line">      showBitmap(bitmap);</div><div class="line">   &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="map方法的源码"><a href="#map方法的源码" class="headerlink" title="map方法的源码"></a>map方法的源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Returns an Observable that applies a specified function to each item emitted by the source Observable and</div><div class="line"> * emits the results of these function applications.</div><div class="line"> *</div><div class="line"> * @param &lt;R&gt; the output type</div><div class="line"> * @param func</div><div class="line"> *            a function to apply to each item emitted by the Observable</div><div class="line"> * @return an Observable that emits the items from the source Observable, transformed by the specified</div><div class="line"> *         function</div><div class="line"> */</div><div class="line">public final &lt;R&gt; Observable&lt;R&gt; map(Func1&lt;? super T, ? extends R&gt; func) &#123;</div><div class="line">    return create(new OnSubscribeMap&lt;T, R&gt;(this, func));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OnSubscribeMap源码"><a href="#OnSubscribeMap源码" class="headerlink" title="OnSubscribeMap源码"></a>OnSubscribeMap源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Applies a function of your choosing to every item emitted by an &#123;@code Observable&#125;, and emits the results of</div><div class="line"> * this transformation as a new &#123;@code Observable&#125;.</div><div class="line"> *</div><div class="line"> * @param &lt;T&gt; the input value type</div><div class="line"> * @param &lt;R&gt; the return value type</div><div class="line"> */</div><div class="line">public final class OnSubscribeMap&lt;T, R&gt; implements OnSubscribe&lt;R&gt; &#123;  //实现了OnSubscribe接口</div><div class="line">    final Observable&lt;T&gt; source;</div><div class="line">    final Func1&lt;? super T, ? extends R&gt; transformer;</div><div class="line">    public OnSubscribeMap(Observable&lt;T&gt; source, Func1&lt;? super T, ? extends R&gt; transformer) &#123;</div><div class="line">        this.source = source;</div><div class="line">        this.transformer = transformer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void call(final Subscriber&lt;? super R&gt; o) &#123;</div><div class="line">        MapSubscriber&lt;T, R&gt; parent = new MapSubscriber&lt;T, R&gt;(o, transformer);</div><div class="line">        o.add(parent);</div><div class="line">        source.unsafeSubscribe(parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static final class MapSubscriber&lt;T, R&gt; extends Subscriber&lt;T&gt; &#123;</div><div class="line">        final Subscriber&lt;? super R&gt; actual;</div><div class="line">        final Func1&lt;? super T, ? extends R&gt; mapper;</div><div class="line"></div><div class="line">        boolean done;</div><div class="line"></div><div class="line">        public MapSubscriber(Subscriber&lt;? super R&gt; actual, Func1&lt;? super T, ? extends R&gt; mapper) &#123;</div><div class="line">            this.actual = actual;</div><div class="line">            this.mapper = mapper;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onNext(T t) &#123;</div><div class="line">            R result;</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                result = mapper.call(t);  //重要</div><div class="line">            &#125; catch (Throwable ex) &#123;</div><div class="line">                Exceptions.throwIfFatal(ex);</div><div class="line">                unsubscribe();</div><div class="line">                onError(OnErrorThrowable.addValueAsLastCause(ex, t));</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            actual.onNext(result);  //处理后调用原始的Subscriber</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onError(Throwable e) &#123;</div><div class="line">            if (done) &#123;</div><div class="line">                RxJavaHooks.onError(e);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            done = true;</div><div class="line"></div><div class="line">            actual.onError(e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onCompleted() &#123;</div><div class="line">            if (done) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            actual.onCompleted();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void setProducer(Producer p) &#123;</div><div class="line">            actual.setProducer(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是很眼熟, 这个实现和<a href="http://www.jianshu.com/p/7c34e656fe10" target="_blank" rel="external">filter方法和OnSubscribeFilter类源码解析</a> 的流程一致, 有兴趣的可以看一下这篇文章, 这里不再详解了.<br>OnSubscribeFilter 和 OnSubscribeMap 的区别在于 OnSubscribeMap 中新建的Subscriber调用OnNext的操作, 最终将func1方法返回的数据传递给Subscriber.</p>
<h2 id="FlatMap方法"><a href="#FlatMap方法" class="headerlink" title="FlatMap方法"></a>FlatMap方法</h2><p><a href="http://reactivex.io/documentation/operators/flatmap.html" target="_blank" rel="external">官网介绍</a><br>FlatMap操作符通过一个可以操作每个从原始Observable发射的数据的方法来实现变换Observable, 这个方法可以返回发射其他数据的Observable. FlatMap会合并这些Observable发射的数据并把合并后的数据当做一个序列.</p>
<h4 id="简单用法-1"><a href="#简单用法-1" class="headerlink" title="简单用法"></a>简单用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">Student[] students = ...;</div><div class="line"></div><div class="line">Observable.from(students) //创建的Observable会连续调用subscriber的onNext()方法</div><div class="line">.flatMap(new Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123; </div><div class="line">  @override </div><div class="line">  public Observable&lt;Course&gt; call(Student student) &#123; //该方法会被调用students.count次</div><div class="line">   //getCourses()方法返回的是列表</div><div class="line">   Observable observable = Observable.from(student.getCourses());   // 关键</div><div class="line">   return observable;</div><div class="line">  &#125; </div><div class="line">&#125;) </div><div class="line">.subscribe(new Subscriber&lt;Course&gt;() &#123; </div><div class="line">  @override</div><div class="line">  public void onNext(Course course) &#123;  //该方法会被调用(students.count * 每个学生的课程数)次</div><div class="line">    Log.d(tag, course.getName()); </div><div class="line">  &#125;</div><div class="line">   //...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="FlatMap方法的源码"><a href="#FlatMap方法的源码" class="headerlink" title="FlatMap方法的源码"></a>FlatMap方法的源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Returns an Observable that emits items </div><div class="line"> * based on </div><div class="line"> * applying a function that you supply to each item emitted</div><div class="line"> * by the source Observable, where that function returns an Observable, and then merging those resulting</div><div class="line"> * Observables and emitting the results of this merger.</div><div class="line"> *</div><div class="line"> * @param &lt;R&gt; the value type of the inner Observables and the output type</div><div class="line"> * @param func</div><div class="line"> *            a function that, when applied to an item emitted by the source Observable, returns an</div><div class="line"> *            Observable</div><div class="line"> * @return an Observable that emits the result of applying the transformation function to each item emitted</div><div class="line"> *         by the source Observable and merging the results of the Observables obtained from this</div><div class="line"> *         transformation</div><div class="line"> */</div><div class="line">public final Observable flatMap(Func1 func) &#123;</div><div class="line">    //...</div><div class="line">    return merge(map(func)); //map(func) 返回一个Observable, 再调用merge方法</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Flattens an Observable that emits Observables into a single Observable that emits the items emitted by</div><div class="line"> * those Observables, without any transformation.</div><div class="line"> *</div><div class="line"> * @param &lt;T&gt; the common element base type</div><div class="line"> * @param source</div><div class="line"> *            an Observable that emits Observables</div><div class="line"> * @return an Observable that emits items that are the result of flattening the Observables emitted by the</div><div class="line"> *         &#123;@code source&#125; Observable</div><div class="line"> */</div><div class="line">public static Observable merge(Observable source) &#123;</div><div class="line">    //...</div><div class="line">    return source.lift(OperatorMerge.&lt;T&gt;instance(false));  // 这个OperatorMerge类很重要</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://reactivex.io/documentation/operators/merge.html" target="_blank" rel="external">merge方法的官方介绍</a><br>对lift具体实现有兴趣的可以看<a href="">变换的基础方法: lift</a>,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 伪代码</div><div class="line">// 原代码位置: RxJava/src/main/java/rx/internal/operators/OperatorMerge.java</div><div class="line">public final class OperatorMerge&lt;T&gt; implements Operator&lt;T, Observable&lt;? extends T&gt;&gt; &#123;</div><div class="line">  static final class MergeSubscriber&lt;T&gt; extends Subscriber&lt;Observable&lt;? extends T&gt;&gt; &#123;&#125;</div><div class="line">  static final class MergeProducer&lt;T&gt; extends AtomicLong implements Producer &#123;&#125;</div><div class="line">  static final class InnerSubscriber&lt;T&gt; extends Subscriber&lt;T&gt; &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RxJava学习笔记-Map-和-FlatMap-源码实现解析&quot;&gt;&lt;a href=&quot;#RxJava学习笔记-Map-和-FlatMap-源码实现解析&quot; class=&quot;headerlink&quot; title=&quot;[RxJava学习笔记]-Map-和-FlatMap-源码实现解析&quot;&gt;&lt;/a&gt;[RxJava学习笔记]-Map-和-FlatMap-源码实现解析&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BRxJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Dfilter%E6%96%B9%E6%B3%95%E5%92%8COnSubscribeFilter%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.afluy.site/2016/11/25/[RxJava学习笔记]filter方法和OnSubscribeFilter类源码解析/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxJava学习笔记-filter方法和OnSubscribeFilter类源码解析"><a href="#RxJava学习笔记-filter方法和OnSubscribeFilter类源码解析" class="headerlink" title="[RxJava学习笔记]filter方法和OnSubscribeFilter类源码解析"></a>[RxJava学习笔记]filter方法和OnSubscribeFilter类源码解析</h2><a id="more"></a>
<p>RxJava提供了很多有用的操作符, 今天就解析一下最简单的filter方法的实现</p>
<h4 id="Observable类中filter方法的实现"><a href="#Observable类中filter方法的实现" class="headerlink" title="Observable类中filter方法的实现"></a>Observable类中filter方法的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">//源代码来源: RxJava/src/main/java/rx/Observable.java</div><div class="line">public class Observable&lt;T&gt; &#123;</div><div class="line">  //...</div><div class="line">  public final Observable&lt;T&gt; filter(Func1&lt;? super T, Boolean&gt; predicate) &#123;</div><div class="line">    return create(new OnSubscribeFilter&lt;T&gt;(this, predicate));</div><div class="line">   &#125;</div><div class="line">  //...</div><div class="line">  public static &lt;T&gt; Observable&lt;T&gt; create(OnSubscribe&lt;T&gt; f) &#123;</div><div class="line">    return new Observable&lt;T&gt;(RxJavaHooks.onCreate(f));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>filter方法构造了一个新的Observable的对象, 并将当前Observable对象和Func1对象作为参数传入OnSubscribeFilter类, 所以OnSubscribeFilter类应该实现了Observable.OnSubscribe接口, 当新Observable的对象被调用subscribe方法时, OnSubscribeFilter类的call方法就会被回调,我们接着看一下OnSubscribeFilter类的源码.</p>
<h4 id="OnSubscribeFilter类的实现"><a href="#OnSubscribeFilter类的实现" class="headerlink" title="OnSubscribeFilter类的实现"></a>OnSubscribeFilter类的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">//源代码来源: RxJava/src/main/java/rx/internal/operators/OnSubscribeFilter.java</div><div class="line">package rx.internal.operators;</div><div class="line"></div><div class="line">import rx.*;</div><div class="line">import rx.Observable.OnSubscribe;</div><div class="line">import rx.exceptions.*;</div><div class="line">import rx.functions.Func1;</div><div class="line">import rx.plugins.RxJavaHooks;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Filters an Observable by discarding any items it emits that do not meet some test.</div><div class="line"> * @param &lt;T&gt; the value type</div><div class="line"> */</div><div class="line">public final class OnSubscribeFilter&lt;T&gt; implements OnSubscribe&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    final Observable&lt;T&gt; source;</div><div class="line"></div><div class="line">    final Func1&lt;? super T, Boolean&gt; func1;</div><div class="line"></div><div class="line">    public OnSubscribeFilter(Observable&lt;T&gt; source, Func1&lt;? super T, Boolean&gt; func1) &#123;</div><div class="line">        this.source = source;</div><div class="line">        this.func1 = func1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void call(final Subscriber&lt;? super T&gt; child) &#123;</div><div class="line">        //...</div><div class="line">        FilterSubscriber&lt;T&gt; parent = new FilterSubscriber&lt;T&gt;(child, func1);</div><div class="line"></div><div class="line">        child.add(parent);</div><div class="line"></div><div class="line">        //会调用parent的onStart, onNext, onCompleted/onError方法</div><div class="line">        source.unsafeSubscribe(parent);  //关键</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static final class FilterSubscriber&lt;T&gt; extends Subscriber&lt;T&gt; &#123;</div><div class="line"></div><div class="line">        final Subscriber&lt;? super T&gt; actual;</div><div class="line">        final Func1&lt;? super T, Boolean&gt; func1;</div><div class="line"></div><div class="line">        boolean done;</div><div class="line"></div><div class="line">        public FilterSubscriber(Subscriber&lt;? super T&gt; actual, Func1&lt;? super T, Boolean&gt; func1) &#123;</div><div class="line">            this.actual = actual;</div><div class="line">            this.func1 = func1;</div><div class="line">            //...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onNext(T t) &#123;</div><div class="line">            boolean result;</div><div class="line">            try &#123;</div><div class="line">                result = func1.call(t);</div><div class="line">            &#125; catch (Throwable ex) &#123;</div><div class="line">               //...</div><div class="line">            &#125;</div><div class="line">            if (result) &#123;</div><div class="line">                actual.onNext(t); //关键</div><div class="line">            &#125; </div><div class="line">            //...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onError(Throwable e) &#123;</div><div class="line">            //...</div><div class="line">            actual.onError(e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onCompleted() &#123;</div><div class="line">            //...</div><div class="line">            actual.onCompleted();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void setProducer(Producer p) &#123;</div><div class="line">            super.setProducer(p);</div><div class="line">            actual.setProducer(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造OnSubscribeFilter对象时会传入参数Func1,这就是下面代码中在调用filter方法时传入的Func1对象 (Func1是具体的过滤算法实现)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable.just(1, 2, 3, 4, 5)</div><div class="line">.filter(new Func1&lt;Integer, Boolean&gt;() &#123; //关键, 过滤算法实现</div><div class="line">    @Override</div><div class="line">    public Boolean call(Integer item) &#123;</div><div class="line">      return( item &lt; 4 );</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.subscribe(new Subscriber&lt;Integer&gt;() &#123; //原始Subscriber对象</div><div class="line">    @Override</div><div class="line">    public void onNext(Integer item) &#123;</div><div class="line">      System.out.println(&quot;Next: &quot; + item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onError(Throwable error) &#123;</div><div class="line">      System.err.println(&quot;Error: &quot; + error.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCompleted() &#123;</div><div class="line">      System.out.println(&quot;Sequence complete.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>根据Observable.OnSubscribe接口的用法可以知道OnSubscribeFilter的call方法的Subscriber&lt;? super T&gt; child参数是上面代码中调用subscribe方法时生成的Subscriber对象.<br>当OnSubscribeFilter的call方法被回调时会创建了一个FilterSubscriber对象,FilterSubscriber类继承了Subscriber类, 构造FilterSubscriber对象时需要传入Subscriber对象和Func1对象.<br>可以看出FilterSubscriber类只是构造时传参来的Subscriber的代理,并在调用onNext时做了特殊处理,在onNext方法中调用传参来的func1对象的call方法, 当返回的result 为true才会调用被代理的Subscriber对象的onNext方法, 所以才实现了过滤的功能.</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>filter方法实现过程中会生成一个新的Observable对象,Observable.OnSubscribe对象和Subscriber对象, 并且新的Subscriber对象是原始Subscriber对象的代理,具体的过滤算法由调用者实现Func1接口来提供.</p>
<p>RxJava其他复杂的操作符也按照这样的流程扩展和实现.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RxJava学习笔记-filter方法和OnSubscribeFilter类源码解析&quot;&gt;&lt;a href=&quot;#RxJava学习笔记-filter方法和OnSubscribeFilter类源码解析&quot; class=&quot;headerlink&quot; title=&quot;[RxJava学习笔记]filter方法和OnSubscribeFilter类源码解析&quot;&gt;&lt;/a&gt;[RxJava学习笔记]filter方法和OnSubscribeFilter类源码解析&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BiOS%E7%AC%94%E8%AE%B0%5DSwift%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85(Closures)/"/>
    <id>http://www.afluy.site/2016/11/25/[iOS笔记]Swift中的闭包(Closures)/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS笔记-Swift中的闭包-Closures"><a href="#iOS笔记-Swift中的闭包-Closures" class="headerlink" title="[iOS笔记]Swift中的闭包(Closures)"></a>[iOS笔记]Swift中的闭包(Closures)</h2><a id="more"></a>
<p>闭包是自包含的函数代码块,Swift 中的闭包与 C 和 Objective-C 中的代码块(blocks)以及其他一些编程语言中的匿名函数比较相似。</p>
<p>闭包表达式语法的如下一般形式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> &#123; (parameters) -&gt; returnType in</div><div class="line">     statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>举个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">func backwards(s1: String, s2: String) -&gt; Bool &#123;</div><div class="line">    return s1 &gt; s2</div><div class="line">&#125;</div><div class="line">var reversed = names.sort(backwards)</div></pre></td></tr></table></figure></p>
<p>上面例子对应的闭包表达式版本的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> reversed = names.sort(&#123; (s1: String, s2: String) -&gt; Bool in</div><div class="line">    return s1 &gt; s2</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="1-闭包特性"><a href="#1-闭包特性" class="headerlink" title="1. 闭包特性"></a>1. 闭包特性</h2><h4 id="1-1-根据上下文推断类型-Inferring-Type-From-Context"><a href="#1-1-根据上下文推断类型-Inferring-Type-From-Context" class="headerlink" title="1.1 根据上下文推断类型(Inferring Type From Context)"></a>1.1 根据上下文推断类型(Inferring Type From Context)</h4><p>任何情况下,通过内联闭包表达式构造的闭包作为参数传递给函数或方法时,都可以推断出闭包的参数和返回值类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reversed = names.sort( &#123; s1, s2 in return s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure></p>
<h4 id="1-2-单表达式闭包隐式返回-Implicit-Return-From-Single-Expression-Clossures"><a href="#1-2-单表达式闭包隐式返回-Implicit-Return-From-Single-Expression-Clossures" class="headerlink" title="1.2 单表达式闭包隐式返回(Implicit Return From Single-Expression Clossures)"></a>1.2 单表达式闭包隐式返回(Implicit Return From Single-Expression Clossures)</h4><p>单行表达式闭包可以通过省略 return 关键字来隐式返回单行表达式的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reversed = names.sort( &#123; s1, s2 in s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure>
<h4 id="1-3-参数名称缩写-Shorthand-Argument-Names"><a href="#1-3-参数名称缩写-Shorthand-Argument-Names" class="headerlink" title="1.3 参数名称缩写(Shorthand Argument Names)"></a>1.3 参数名称缩写(Shorthand Argument Names)</h4><p>Swift 自动为内联闭包提供了参数名称缩写功能,您可以直接通过 $0 , $1 , $2 来顺序调用闭包的参数,以此类推。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reversed = names.sort( &#123; $0 &gt; $1 &#125; )</div></pre></td></tr></table></figure></p>
<blockquote>
<h5 id="P-S-我们可以进一步精简"><a href="#P-S-我们可以进一步精简" class="headerlink" title="P.S. 我们可以进一步精简"></a>P.S. 我们可以进一步精简</h5><h6 id="运算符函数-Operator-Functions"><a href="#运算符函数-Operator-Functions" class="headerlink" title="运算符函数(Operator Functions):"></a>运算符函数(Operator Functions):</h6><p>Swift 的 String 类型定义了关于大于号( &gt; )的字符串实现,其作为一个函数接受两个 String 类型的参数并返回 Bool 类型的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reversed = names.sort(&gt;)</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="2-尾随闭包-Trailing-Closures"><a href="#2-尾随闭包-Trailing-Closures" class="headerlink" title="2. 尾随闭包(Trailing Closures)"></a>2. 尾随闭包(Trailing Closures)</h2><p>如果需要将一个很长的闭包表达式作为最后一个参数传递给函数,可以使用尾随闭包来增强函数的可读性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//函数声明</div><div class="line">func someFunctionThatTakesAClosure(closure: () -&gt; Void) &#123; </div><div class="line">	// 函数体部分</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 以下是不使用尾随闭包进行函数调用</div><div class="line">someFunctionThatTakesAClosure(&#123;</div><div class="line">	// 闭包主体部分 </div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 以下是使用尾随闭包进行函数调用 </div><div class="line">someFunctionThatTakesAClosure() &#123;</div><div class="line">	// 闭包主体部分 </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//之前的例子可以写成:</div><div class="line">reversed = names.sort() &#123; $0 &gt; $1 &#125;</div><div class="line"></div><div class="line">//如果函数只需要闭包表达式一个参数,当使用尾随闭包时,甚至可以把 () 省略掉:</div><div class="line">reversed = names.sort &#123; $0 &gt; $1 &#125;</div></pre></td></tr></table></figure>
<h2 id="3-捕获-capturing"><a href="#3-捕获-capturing" class="headerlink" title="3. 捕获(capturing)"></a>3. 捕获(capturing)</h2><p>闭包可以捕获和存储其所在上下文中任意常量和变量的引用。<br>Swift 会管理在捕获过程中涉及到的所有内存操作,包括释放不再需要的变量。</p>
<p>即使定义这些常量和变量的原作用域已经不存在,闭包仍然可以在闭包函数体内引用和修改这些值。</p>
<p>Swift 中,可以捕获值的闭包的最简单形式是嵌套函数,也就是定义在其他函数的函数体内的函数。<br>嵌套函数可以捕获其外部函数所有的参数以及定义的常量和变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">func makeIncrementor(forIncrement amount: Int) -&gt; () -&gt; Int &#123;</div><div class="line">     var runningTotal = 0</div><div class="line">     //声明内嵌函数</div><div class="line">     func incrementor() -&gt; Int &#123; </div><div class="line">         runningTotal += amount //内嵌函数引用了外部函数的amount和runningTotal变量</div><div class="line">         return runningTotal</div><div class="line">     &#125;</div><div class="line">     return incrementor</div><div class="line"> &#125;</div><div class="line"></div><div class="line">let incrementByTen = makeIncrementor(forIncrement: 10)</div><div class="line"></div><div class="line">incrementByTen() // 返回的值为10</div><div class="line">incrementByTen() // 返回的值为20</div><div class="line">incrementByTen() // 返回的值为30</div></pre></td></tr></table></figure>
<blockquote>
<p>P.S 上面的方法调用可以引申理解为makeIncrementor函数体是一个class,<br>而incrementor是class中的函数,incrementor函数引用了class中的属性amount和runningTotal</p>
</blockquote>
<p>如果创建了另一个 incrementor ,它会有属于它自己的一个全新、独立的 runningTotal 变量的引用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let incrementBySeven = makeIncrementor(forIncrement: 7)</div><div class="line">incrementBySeven() // 返回的值为7</div></pre></td></tr></table></figure>
<h2 id="4-闭包是引用类型-Closures-Are-Reference-Types"><a href="#4-闭包是引用类型-Closures-Are-Reference-Types" class="headerlink" title="4. 闭包是引用类型(Closures Are Reference Types)"></a>4. 闭包是引用类型(Closures Are Reference Types)</h2><p>上面的例子中, incrementBySeven 和 incrementByTen 是常量,但是这些常量指向的闭包仍然可以增加其捕获的变量的值。这是因为函数和闭包都是引用类型。<br>无论将函数或闭包赋值给一个常量还是变量,实际上都是将常量或变量的值设置为对应函数或闭包的引 用。上面的例子中,指向闭包的引用 incrementByTen 是一个常量,而并非闭包内容本身。</p>
<blockquote>
<h5 id="这也意味着如果将闭包赋值给了两个不同的常量或变量-两个值都会指向同一个闭包"><a href="#这也意味着如果将闭包赋值给了两个不同的常量或变量-两个值都会指向同一个闭包" class="headerlink" title="这也意味着如果将闭包赋值给了两个不同的常量或变量,两个值都会指向同一个闭包!"></a>这也意味着如果将闭包赋值给了两个不同的常量或变量,两个值都会指向同一个闭包!</h5></blockquote>
<h2 id="5-非逃逸闭包-Nonescaping-Closures"><a href="#5-非逃逸闭包-Nonescaping-Closures" class="headerlink" title="5. 非逃逸闭包(Nonescaping Closures)"></a>5. 非逃逸闭包(Nonescaping Closures)</h2><p>当一个闭包作为参数传到一个函数中,但是这个闭包在函数返回之后才被执行,我们称该闭包从函数中逃逸。<br>你可以在参数名之前标注 @noescape ,用来指明这个闭包是不允许“逃逸”出这个函数的。<br>将闭包标注 @noescape 能使编译器知道这个闭包的生命周期(闭包只能在函数体中被执行,不能脱离函数体执行,所以编译器明确知道运行时的上下文),从而可以进行一些比较激进的优化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">func someFunctionWithNoescapeClosure(@noescape closure: () -&gt; Void) &#123;</div><div class="line">    closure()</div><div class="line">&#125;</div><div class="line"></div><div class="line">//函数接受的闭包被添加到一个函数外定义的数组中</div><div class="line">var completionHandlers: [() -&gt; Void] = []</div><div class="line">func someFunctionWithEscapingClosure(completionHandler: () -&gt; Void) &#123;</div><div class="line">    completionHandlers.append(completionHandler)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SomeClass &#123;</div><div class="line">    var x = 10</div><div class="line">    func doSomething() &#123;</div><div class="line">        //将闭包标注为 @noescape 使能在闭包中隐式地引用 self</div><div class="line">        someFunctionWithEscapingClosure &#123; self.x = 100 &#125; </div><div class="line">        someFunctionWithNoescapeClosure &#123; x = 200 &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let instance = SomeClass()</div><div class="line"></div><div class="line">instance.doSomething()</div><div class="line">print(instance.x) // prints &quot;200&quot;</div><div class="line"></div><div class="line">completionHandlers.first?()</div><div class="line">print(instance.x) // prints &quot;100&quot;</div></pre></td></tr></table></figure></p>
<h2 id="6-自动闭包-Autoclosures"><a href="#6-自动闭包-Autoclosures" class="headerlink" title="6. 自动闭包(Autoclosures)"></a>6. 自动闭包(Autoclosures)</h2><p>这种闭包不接受任何参数,当它被调用的时候,会返回被包装在其中的表达式的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var customersInLine = [&quot;Chris&quot;, &quot;Alex&quot;, &quot;Ewa&quot;, &quot;Barry&quot;, &quot;Daniella&quot;]</div><div class="line"></div><div class="line">// customerProvider 的类型不是 String ,而是 () -&gt; String </div><div class="line">let customerProvider = &#123; customersInLine.removeAtIndex(0) &#125;</div><div class="line"></div><div class="line">print(&quot;Now serving \(customerProvider())!&quot;) // prints &quot;Now serving Chris!&quot;</div><div class="line">print(customersInLine.count)   // prints &quot;4&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// customersInLine is [&quot;Alex&quot;, &quot;Ewa&quot;, &quot;Barry&quot;, &quot;Daniella&quot;]</div><div class="line">func serveCustomer(customerProvider: () -&gt; String) &#123;</div><div class="line">    print(&quot;Now serving \(customerProvider())!&quot;)</div><div class="line">&#125;</div><div class="line">serveCustomer( &#123; customersInLine.removeAtIndex(0) &#125; )</div><div class="line">// prints &quot;Now serving Alex!&quot;</div><div class="line"></div><div class="line"></div><div class="line">使用@autoclosure</div><div class="line">func serveCustomer(@autoclosure customerProvider: () -&gt; String) &#123;</div><div class="line">     print(&quot;Now serving \(customerProvider())!&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">serveCustomer(customersInLine.removeAtIndex(0))</div><div class="line"> // prints &quot;Now serving Ewa!&quot;</div></pre></td></tr></table></figure>
<p>@autoclosure特性暗含了@noescape 特性,如果你想让这个闭包可以“逃逸”,则应该使用@autoclosure(escaping) 特性.</p>
<p>参考资料:The Swift Programming Language</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iOS笔记-Swift中的闭包-Closures&quot;&gt;&lt;a href=&quot;#iOS笔记-Swift中的闭包-Closures&quot; class=&quot;headerlink&quot; title=&quot;[iOS笔记]Swift中的闭包(Closures)&quot;&gt;&lt;/a&gt;[iOS笔记]Swift中的闭包(Closures)&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BSwift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5D-ObjectMapper-%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.afluy.site/2016/11/25/[Swift学习笔记]-ObjectMapper-框架/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swift学习笔记-ObjectMapper-框架"><a href="#Swift学习笔记-ObjectMapper-框架" class="headerlink" title="[Swift学习笔记]-ObjectMapper-框架"></a>[Swift学习笔记]-ObjectMapper-框架</h2><a id="more"></a>
<p><a href="https://github.com/Hearst-DD" target="_blank" rel="external">Hearst-DD</a>/<strong><a href="https://github.com/Hearst-DD/ObjectMapper" target="_blank" rel="external">ObjectMapper</a></strong></p>
<p>ObjectMapper是用Swift语言实现对象和JSON相互转换的框架</p>
<p>ObjectMapper框架支持的数据结构类型:</p>
<ul>
<li>Int</li>
<li>Bool</li>
<li>Double</li>
<li>Float</li>
<li>String</li>
<li>RawRepresentable(Enums)</li>
<li>Array<anyobject></anyobject></li>
<li>Dictionary<string, anyobject=""></string,></li>
<li>Object<t: mappable=""></t:></li>
<li>Array<t: mappable=""></t:></li>
<li>Array<array<t: mappable="">&gt;</array<t:></li>
<li>Set<t: mappable=""></t:></li>
<li>Dictionary<string, t:="" mappable=""></string,></li>
<li>Dictionary<string, array<t:="" mappable="">&gt;</string,></li>
<li>Optionals of all the above //上述的可选类型</li>
<li>Implicitly Unwrapped Optionals of the above  //上述的隐式解析可选类型</li>
</ul>
<p>其中Mappable是ObjectMapper框架中定义的一个接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public protocol Mappable &#123;</div><div class="line"> /// This function can be used to validate JSON prior to mapping.</div><div class="line"> /// Return nil to cancel mapping at this point</div><div class="line"> init?(_ map: Map)</div><div class="line"> /// This function is where all variable mappings should occur. </div><div class="line"> ///It is executed by Mapper during the mapping (serialization and deserialization) process.</div><div class="line"> mutating func mapping(map: Map)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li><p>在项目的podfile中添加:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;ObjectMapper&apos;, &apos;~&gt; 1.3&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>运行 pod install</p>
</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class User: Mappable &#123;</div><div class="line">    var username: String?</div><div class="line">    var age: Int?</div><div class="line">    var weight: Double!</div><div class="line">    var array: [AnyObject]?</div><div class="line">    var dictionary: [String : AnyObject] = [:]</div><div class="line">    var bestFriend: User?                       // Nested User object</div><div class="line">    var friends: [User]?                        // Array of Users</div><div class="line">    var birthday: NSDate?</div><div class="line">    var imageURLs: Array&lt;NSURL&gt;?</div><div class="line"></div><div class="line">    required init?(_ map: Map) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Mappable</div><div class="line">    func mapping(map: Map) &#123;</div><div class="line">        username    &lt;- map[&quot;username&quot;]</div><div class="line">        age         &lt;- map[&quot;age&quot;]</div><div class="line">        weight      &lt;- map[&quot;weight&quot;]</div><div class="line">        array       &lt;- map[&quot;arr&quot;]</div><div class="line">        dictionary  &lt;- map[&quot;dict&quot;]</div><div class="line">        bestFriend  &lt;- map[&quot;best_friend&quot;]</div><div class="line">        friends     &lt;- map[&quot;friends&quot;]</div><div class="line">        birthday    &lt;- (map[&quot;birthday&quot;], DateTransform())</div><div class="line">        posterURL   &lt;- (map[&quot;image&quot;], URLTransform())</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义的Model需要实现Mappable接口,并在mapping(map: Map)方法中将Model的属性与JSON结构的Key相映射, 如果ObjectMapper支持该属性的类型的转换, 只需要写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username &lt;- map[&quot;username&quot;]</div></pre></td></tr></table></figure></p>
<p>如果ObjectMapper不支持转换就需要调用Mappable额外提供的类, NSDate类型可以用DateTransform()类转换:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">birthday &lt;- (map[&quot;birthday&quot;], DateTransform())</div></pre></td></tr></table></figure></p>
<p>如果ObjectMapper也没有提供类型转化方法就需要自定义了转换类了, 这里就自定义了一个URLArrayTransform类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line">import ObjectMapper</div><div class="line"></div><div class="line">class URLArrayTransform: TransformType &#123;</div><div class="line">    typealias Object = Array&lt;NSURL&gt;</div><div class="line">    typealias JSON = Array&lt;AnyObject&gt;</div><div class="line">    </div><div class="line">    init() &#123;&#125;</div><div class="line">    </div><div class="line">    func transformFromJSON(value: AnyObject?) -&gt; Array&lt;NSURL&gt;? &#123;</div><div class="line">        if let URLStrings = value as? [String] &#123;</div><div class="line">            var listOfUrls = [NSURL]()</div><div class="line">            for item in URLStrings &#123;</div><div class="line">                if let url = NSURL(string: item) &#123;</div><div class="line">                    listOfUrls.append(url)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return listOfUrls</div><div class="line">        &#125;</div><div class="line">        return nil</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func transformToJSON(value: [NSURL]?) -&gt; JSON? &#123;</div><div class="line">        if let urls = value &#123;</div><div class="line">            var urlStrings = [String]()</div><div class="line">            for url in urls &#123;</div><div class="line">                urlStrings.append(url.absoluteString)</div><div class="line">            &#125;</div><div class="line">            return urlStrings</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return nil</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自定义的转换类需要实现 ObjectMapper 的 TransformType 接口, 从 URLArrayTransform 的实现中可以看出自定义转换类还是比较简单的, 主要就是重写 transformFromJSON 和 transformToJSON 方法.</p>
<p>完整实现了 User 类后, 就可以是 User 和 JSON 字符串相互转换了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let user = User(JSONString: JSONString)</div><div class="line"></div><div class="line">let JSONString = user.toJSONString(prettyPrint: true)  //prettyPrint参数用于生成JSON字符串是否格式化, 以便于打印</div><div class="line"></div><div class="line">使用Mapper类转换</div><div class="line">let user = Mapper&lt;User&gt;().map(JSONString: JSONString)</div><div class="line"></div><div class="line">let JSONString = Mapper().toJSONString(user, prettyPrint: true)</div></pre></td></tr></table></figure>
<h2 id="补充-AlamofireObjectMapper"><a href="#补充-AlamofireObjectMapper" class="headerlink" title="补充: AlamofireObjectMapper"></a>补充: AlamofireObjectMapper</h2><p><a href="https://github.com/tristanhimmelman" target="_blank" rel="external">tristanhimmelman</a>/<strong><a href="https://github.com/tristanhimmelman/AlamofireObjectMapper" target="_blank" rel="external">AlamofireObjectMapper</a></strong></p>
<p>该框架可以结合 Alamofire 和 ObjectMapper 使用, 为Alamofire的Request类扩展出了responseObject 和 responseArray 方法, 更方便的将网络通信返回的JSON数据转换成对象</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ul>
<li><p>在项目的podfile中添加:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;AlamofireObjectMapper&apos;, &apos;~&gt; 3.0&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>运行 pod install</p>
</li>
</ul>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let URL = &quot;...&quot;</div><div class="line">Alamofire.request(.GET, URL).responseObject &#123; (response: DataResponse&lt;WeatherResponse&gt;) in</div><div class="line"></div><div class="line">    let weatherResponse = response.result.value</div><div class="line"></div><div class="line">    if let threeDayForecast = weatherResponse?.threeDayForecast &#123;</div><div class="line">        for forecast in threeDayForecast &#123;</div><div class="line">            print(forecast.day)</div><div class="line">            print(forecast.temperature)           </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Swift学习笔记-ObjectMapper-框架&quot;&gt;&lt;a href=&quot;#Swift学习笔记-ObjectMapper-框架&quot; class=&quot;headerlink&quot; title=&quot;[Swift学习笔记]-ObjectMapper-框架&quot;&gt;&lt;/a&gt;[Swift学习笔记]-ObjectMapper-框架&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%E9%85%8D%E7%BD%AE-fastlane-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.afluy.site/2016/11/25/配置-fastlane-遇到的问题/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T13:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置-fastlane-遇到的问题"><a href="#配置-fastlane-遇到的问题" class="headerlink" title="配置-fastlane-遇到的问题"></a>配置-fastlane-遇到的问题</h2><a id="more"></a>
<h4 id="下面的问题是因为-bundler-库本身的一个尚未解决的bug引起的"><a href="#下面的问题是因为-bundler-库本身的一个尚未解决的bug引起的" class="headerlink" title="下面的问题是因为 bundler 库本身的一个尚未解决的bug引起的:"></a>下面的问题是因为 bundler 库本身的一个尚未解决的bug引起的:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You&apos;ll need to update your bundle to a different version of json (1.8.3) that hasn&apos;t been removed in order to install. (Bundler::GemNotFound)</div></pre></td></tr></table></figure>
<p>面的问题是因为 bundler 库本身的一个尚未解决的bug引起的,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[11:48:47]: Exit status of command &apos;fir publish ../build/Remote_debug.ipa&apos; was 1 instead of 0.</div><div class="line">/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/universal-darwin16/rbconfig.rb:213: warning: Insecure world writable dir /usr/local/lib in PATH, mode 040777</div><div class="line">/usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.6/lib/bundler/rubygems_integration.rb:336:in `block (2 levels) in replace_gem&apos;: fir-cli is not part of the bundle. Add it to Gemfile. (Gem::LoadError)</div><div class="line">	from /usr/local/bin/fir:22:in `&lt;main&gt;&apos;</div></pre></td></tr></table></figure></p>
<p><a href="https://rubygems.org/gems/fir-cli" target="_blank" rel="external">https://rubygems.org/gems/fir-cli</a><br>gem ‘fir-cli’, ‘~&gt; 1.5’</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置-fastlane-遇到的问题&quot;&gt;&lt;a href=&quot;#配置-fastlane-遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;配置-fastlane-遇到的问题&quot;&gt;&lt;/a&gt;配置-fastlane-遇到的问题&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/RAC-%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.afluy.site/2016/11/25/RAC-小知识/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RAC-小知识"><a href="#RAC-小知识" class="headerlink" title="RAC-小知识"></a>RAC-小知识</h2><a id="more"></a>
<p><img src="https://kevinhm.gitbooks.io/functionalreactiveprogrammingonios/content/images/MVVM_high_level.png" alt="在MVVM中，我们趋向于将view和view controller作为一个整体,
新的viewModel代替原来的viewController协调view与model之间的交互。"></p>
<blockquote>
<p>通过将定制的业务逻辑放置于视图模型中，我避免了视图控制器的臃肿化，视图控制器仅需要根据视图模型的协议来知道如何显示即可。 MVVM是子类化视图控制器的一个很好的选择。</p>
</blockquote>
<p>VieModel 中不是只有属性, 也包含处理数据的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RAC(imageView, image) = [RACObserve(self.photoModel, fullsizeData) map:^id (id value)&#123;</div><div class="line">	return [UIImage imageWithData:value];</div><div class="line">&#125;];</div><div class="line">这样就将UIImageView的image属性和数据模型photoModel的fullsizeData属性进行了绑定</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">在任意的ViewModel中将相关的属性和View控件相绑定</div><div class="line">@property (nonatomic, strong ) FRPPhotoModel *photoModel;</div><div class="line"></div><div class="line">RAC(self.imageView, image) = [[RACObserve(self, photoModel.thumbnailData) ignore:nil]</div><div class="line">	map:^(NSData *data)&#123;</div><div class="line">		return [UIImage imageWithData:data];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">注意看我们观察的是self的photoModel.thumbnailData的关键路径，而非self.photoModel的thumbnailData的关键路径。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[SVProgressHUD show];</div><div class="line">//Fetch data</div><div class="line">[[FRPPhotoImporter fetchPhotoDetails:self.photoModel]</div><div class="line">        subscribeError:^(NSError * error)&#123;</div><div class="line">            [SVProgressHUD showErrorWithStatus:@&quot;Error&quot;];</div><div class="line">        &#125;</div><div class="line">        completed:^&#123;</div><div class="line">            [SVProgressHUD dismiss];</div><div class="line">        &#125;];</div><div class="line"></div><div class="line">+ (RACReplaySubject *)fetchPhotoDetails:(FRPPhotoModel *)photoModel &#123;</div><div class="line">    RACReplaySubject * subject = [RACReplaySubject subject];</div><div class="line">    NSURLRequest *request = [self photoURLRequest:photoModel];</div><div class="line"></div><div class="line">    [NSURLConnection sendAsynchronousRequest:request</div><div class="line">        queue:[NSOperationQueue mainQueue]</div><div class="line">        completionHandler:^ (NSURLResponse *response, NSData * data, NSError *connectionError)&#123;</div><div class="line">            if(data)&#123;</div><div class="line">                id results = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil][ @&quot;photo&quot; ];</div><div class="line"></div><div class="line">                [self configurePhotoModel:photoModel withDictionary:results];</div><div class="line">                [self downloadFullsizedImageForPhotoModel:photoModel];</div><div class="line"></div><div class="line">                [subject sendNext:photoModel];</div><div class="line">                [subject sendCompleted];</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                [subject sendError:connectionError];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line"></div><div class="line">    return subject;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">RACSignal *photoSignal = [FRPPhotoImporter importPhotos];</div><div class="line">RACSignal *photosLoaded = [photoSignal catch:^RACSignal *(NSError *error) &#123;</div><div class="line">    NSLog(@&quot;Couldn&apos;t fetch photos from 500px : %@&quot;,error);</div><div class="line">    return [RACSignal empty];</div><div class="line">&#125;];</div><div class="line">RAC(self, photosArray) = photosLoaded;</div><div class="line">[photosLoaded subscribeCompleted: ^&#123;</div><div class="line">    @strongify(self);</div><div class="line">    [self.conllectionView reloadData];</div><div class="line">&#125;];</div><div class="line">比起subscribeError: 方法，catch: 方法处理的更为巧妙：它允许无错误值的信号穿透它，仅在信号有错误事件发生时才会调用它的block并发送其在发生错误时的返回值。这里我们使用catch:</div><div class="line">方法，来过滤无错误的值。</div><div class="line"></div><div class="line">上面的代码等效于:</div><div class="line">RAC(self, photosArray) = [[[[FRPPhotoImporter importPhotos]</div><div class="line">        doCompleted:^&#123;</div><div class="line">            @strongify(self);</div><div class="line">            [self.collectionView reloadData];</div><div class="line">        &#125;] logError] catchTo:[RACSignal empty]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+ (RACSignal *)fetchPhotoDetails:(FRPPhotoModel *)photoModel &#123;</div><div class="line">    NSURLRequest *request = [self photoURLRequest:photoModel];</div><div class="line">    return [[[[[[NSURLConnection rac_sendAsynchronousRequest:request]</div><div class="line">                                map:^id(RACTuple *value)&#123;</div><div class="line">                                    return [value second];</div><div class="line">                                &#125;]</div><div class="line">                                deliverOn:[RACScheduler mainThreadScheduler]]</div><div class="line">                                    map:^id (NSData *data) &#123;</div><div class="line">                                        id results = [NSJSONSerialization JSONObjectWithData:data</div><div class="line">                                                                       options:0 error:nil][@&quot;photo&quot;];</div><div class="line">                                        [self configurePhotoModel:photoModel withDictionary:results];</div><div class="line">                                        [self downloadFullsizedImageForPhotoModel:photoModel];</div><div class="line">                                        return photoModel;</div><div class="line">                                    &#125;] publish] autoconnect];</div><div class="line">&#125;</div><div class="line"></div><div class="line">publish返回一个RACMulitcastConnection,当信号连接上时，他将订阅该接收信号。autoconnect为我们做的是：当它返回的信号被订阅，连接到 该(订阅背后的)信号（underly signal）。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">有一个禅宗佛教的概念叫做&quot;初心&quot;。禅宗法师[铃木俊隆]写道：&quot;初学者的心中有很多可能性（潜意识的点子），但在专家心里(这种可能性/点子)就相对少很多&quot;。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RAC-小知识&quot;&gt;&lt;a href=&quot;#RAC-小知识&quot; class=&quot;headerlink&quot; title=&quot;RAC-小知识&quot;&gt;&lt;/a&gt;RAC-小知识&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BRxJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5D-%E5%8F%98%E6%8D%A2%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95--lift/"/>
    <id>http://www.afluy.site/2016/11/25/[RxJava学习笔记]-变换的基础方法--lift/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxJava学习笔记-变换的基础方法–lift"><a href="#RxJava学习笔记-变换的基础方法–lift" class="headerlink" title="[RxJava学习笔记]-变换的基础方法–lift"></a>[RxJava学习笔记]-变换的基础方法–lift</h2><a id="more"></a>
<h2 id="lift方法"><a href="#lift方法" class="headerlink" title="lift方法"></a>lift方法</h2><p>lift方法涉及到 Operator 接口, 先看一下 Operator 接口的定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Operator&lt;R, T&gt; extends Func1&lt;Subscriber&lt;? super R&gt;, Subscriber&lt;? super T&gt;&gt; &#123;</div><div class="line">   // cover for generics insanity</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package rx.functions;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Represents a function with one argument.</div><div class="line"> * @param &lt;T&gt; the first argument type</div><div class="line"> * @param &lt;R&gt; the result type</div><div class="line"> */</div><div class="line">public interface Func1&lt;T, R&gt; extends Function &#123;</div><div class="line">    R call(T t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以Operator接口可以看成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">public interface Operator&lt;R, T&gt; &#123;</div><div class="line">    public Subscriber&lt;R&gt; call(Subscriber&lt;T&gt; subscriber);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Operator的简单实现"><a href="#Operator的简单实现" class="headerlink" title="Operator的简单实现"></a>Operator的简单实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">//将事件序列中的 Integer 对象转换为 String 对象</div><div class="line">Operator operator = new Observable.Operator() &#123;</div><div class="line">    @override</div><div class="line">    public Subscriber call(final Subscriber subscriber) &#123;</div><div class="line">        </div><div class="line">        return new Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            @override</div><div class="line">            public void onNext(Integer integer) &#123;</div><div class="line">            	String string = &quot;&quot; + integer;  //转换操作</div><div class="line">                subscriber.onNext(string);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @override</div><div class="line">            public void onCompleted() &#123;</div><div class="line">                subscriber.onCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @override</div><div class="line">            public void onError(Throwable e) &#123;</div><div class="line">                subscriber.onError(e);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码里Operator接口实现中新建一个Subscriber对象并在调用传参来的subscriber的onNext方法前做了一个特定操作, 所以只是对Subscriber对象做了一层代理.</p>
<h4 id="lift方法源码"><a href="#lift方法源码" class="headerlink" title="lift方法源码"></a>lift方法源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">//Observable中lift方法的实现</div><div class="line">public class Observable&lt;T&gt; &#123;</div><div class="line">  //...</div><div class="line">  Observable.OnSubscribe onSubscribe;</div><div class="line"></div><div class="line">  public Observable lift(Operator operator) &#123;</div><div class="line">    return Observable.create(new Observable.OnSubscribe() &#123;</div><div class="line">          </div><div class="line">      @override</div><div class="line">      public void call(Subscriber subscriber) &#123;</div><div class="line"></div><div class="line">        Subscriber newSubscriber = operator.call(subscriber);</div><div class="line">        newSubscriber.onStart();</div><div class="line"></div><div class="line">        onSubscribe.call(newSubscriber); //关键调用</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>lift方法中新建了一个Observable对象并在Observable.OnSubscribe的实现中调用传参的Operator对象的call方法新建了一个Subscriber对象, 并调用了onSubscribe.call(newSubscriber), 注意call方法传参的是newSubscriber对象而不是原始的subscriber对象.</p>
<h3 id="lift方法的用法"><a href="#lift方法的用法" class="headerlink" title="lift方法的用法"></a>lift方法的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">// lift方法将Int类型转换成String类型</div><div class="line">1 Observable.create(new Observable.OnSubscribe() &#123;</div><div class="line">2    @override</div><div class="line">3     public void call(Subscriber subscriber) &#123;</div><div class="line">4         subscriber.onNext(1); //Int类型</div><div class="line">5         subscriber.onCompleted();</div><div class="line">6     &#125;</div><div class="line">7 &#125;)</div><div class="line">8</div><div class="line">9  .lift(operator)  // Int --&gt; String</div><div class="line">10</div><div class="line">11 .subscribe(new Subscriber() &#123;</div><div class="line">12   @override</div><div class="line">13    public void onNext(String s) &#123; //String类型</div><div class="line">14        Log.d(tag, &quot;Item: &quot; + s);</div><div class="line">15    &#125;</div><div class="line">16</div><div class="line">17    @override</div><div class="line">18    public void onCompleted() &#123;</div><div class="line">19        Log.d(tag, &quot;Completed!&quot;);</div><div class="line">20    &#125;</div><div class="line">21</div><div class="line">22    @override</div><div class="line">23    public void onError(Throwable e) &#123;</div><div class="line">24        Log.d(tag, &quot;Error!&quot;);</div><div class="line">25    &#125;</div><div class="line">26 &#125;);</div></pre></td></tr></table></figure>
<p>结合fit方法源码和Operator的实现可以整理出程序运行流程:</p>
<ol>
<li><p>因为fit返回了一个新Observable对象,所以第11行是调用这个新Observable对象的subscribe方法, 所以会执行fit方法中构造新Observable对象的Observable.OnSubscribe接口的call方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">return Observable.create(new Observable.OnSubscribe() &#123;</div><div class="line">    @override</div><div class="line">    public void call(Subscriber subscriber) &#123;</div><div class="line"></div><div class="line">       Subscriber newSubscriber = operator.call(subscriber);</div><div class="line">       newSubscriber.onStart();</div><div class="line"></div><div class="line">       onSubscribe.call(newSubscriber); //关键调用</div><div class="line">     &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>执行onSubscribe.call(newSubscriber)方法时, 会调用构造原始Observable对象中的Observable.OnSubscribe接口的call方法, 所以call(Subscriber subscriber)方法中的参数subscriber是operator.call(subscriber)创建newSubscriber对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3   public void call(Subscriber subscriber) &#123;</div><div class="line">4         subscriber.onNext(1); //Int类型</div><div class="line">5         subscriber.onCompleted();</div><div class="line">6     &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接着调用第4行subscriber.onNext(1)方法就会执行了newSubscriber对象的onNext方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> public void onNext(Integer integer) &#123; </div><div class="line">      String string = &quot;&quot; + integer; //转换操作 </div><div class="line">      subscriber.onNext(string); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>该方法中的subscriber是原始subscriber对象,这时根据Int生成了String参数</p>
<ol>
<li>调用subscriber.onNext(string) 方法时就会执行第13行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">13    public void onNext(String s) &#123; //String类型</div><div class="line">14        Log.d(tag, &quot;Item: &quot; + s);</div><div class="line">15    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样流程就执行完成了</p>
<p>小结: 这种连续调用类似于装饰者模式(Decorator Pattern), 即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));</div></pre></td></tr></table></figure></p>
<p>在 RxJava 的内部flatMap就是基于基础的lift方法, RxJava中提供的各种变换虽然功能各有不同，但实质上都是<strong>针对事件序列的处理和再发送</strong>.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/44094895" target="_blank" rel="external">http://blog.csdn.net/lzyzsd/article/details/44094895</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RxJava学习笔记-变换的基础方法–lift&quot;&gt;&lt;a href=&quot;#RxJava学习笔记-变换的基础方法–lift&quot; class=&quot;headerlink&quot; title=&quot;[RxJava学习笔记]-变换的基础方法–lift&quot;&gt;&lt;/a&gt;[RxJava学习笔记]-变换的基础方法–lift&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%E9%85%8D%E7%BD%AE-fastlane-%E6%A1%86%E6%9E%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83-iOS-%E5%BA%94%E7%94%A8/"/>
    <id>http://www.afluy.site/2016/11/25/配置-fastlane-框架自动化打包发布-iOS-应用/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:50:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置-fastlane-框架自动化打包发布-iOS-应用"><a href="#配置-fastlane-框架自动化打包发布-iOS-应用" class="headerlink" title="配置-fastlane-框架自动化打包发布-iOS-应用"></a>配置-fastlane-框架自动化打包发布-iOS-应用</h2><a id="more"></a>
<p><a href="https://github.com/fastlane" target="_blank" rel="external">fastlane</a>/<strong><a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">fastlane</a></strong><br><img src="https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png" alt=""></p>
<h4 id="安装RVM"><a href="#安装RVM" class="headerlink" title="安装RVM"></a>安装RVM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.rvm.io | bash -s stable --ruby</div></pre></td></tr></table></figure>
<p>安装 RVM 是需要管理多版本的 Ruby 环境</p>
<h4 id="安装fastlane"><a href="#安装fastlane" class="headerlink" title="安装fastlane"></a>安装fastlane</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install fastlane --verbose</div></pre></td></tr></table></figure>
<h4 id="fastlane初始化"><a href="#fastlane初始化" class="headerlink" title="fastlane初始化"></a>fastlane初始化</h4><p>在项目目录下运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastlane init</div></pre></td></tr></table></figure></p>
<p>命令运行时需要输入Apple ID, 运行成功后会生成 fastlane/Fastlane 文件, Fastlane 是一个 ruby 脚本</p>
<h4 id="使用-bundler-管理依赖"><a href="#使用-bundler-管理依赖" class="headerlink" title="使用 bundler 管理依赖"></a>使用 bundler 管理依赖</h4><p><a href="https://docs.fastlane.tools/getting-started/ios/setup/#use-a-gemfile" target="_blank" rel="external">官网介绍</a><br>bundler 用来管理 fastlane 自身版本和 fastlane 运行时的相关依赖版本, 相当于 iOS 开发中的 CocoaPods 框架, 使用方法也和 CocoaPods 如出一辙</p>
<ul>
<li><p>安装 bundler</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gem install bundler</div><div class="line">``` </div><div class="line">* 在项目根目录下新建 Gemfile 文件并写入</div></pre></td></tr></table></figure>
<p>source “<a href="https://gems.ruby-china.org" target="_blank" rel="external">https://gems.ruby-china.org</a>“</p>
<p>gem “fastlane”<br>gem “cocoapods”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 安装依赖库, 生成  Gemfile.lock 文件, 这个文件和我们平常接触的 Podfile.lock 文件功能一致, 配置 CI 时也需要在每次构建前调用该命令</div></pre></td></tr></table></figure>
<p>[sudo] bundle install</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 更新 Gemfile.lock 文件</div></pre></td></tr></table></figure>
</li>
</ul>
<p>[sudo] bundle update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 运行 fastlane 框架</div></pre></td></tr></table></figure></p>
<p>bundle exec fastlane [lane]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">####安装match</div><div class="line">[github官网介绍](https://github.com/fastlane/fastlane/tree/master/match)</div><div class="line">match 是 fastlane 的一个功能组件,  采取了集中化方式来管理证书和 profile,  新建一个私有远程 git 库用来保存证书和 profile, 一个 team 的开发者共用同一套证书, 方便了管理和配置, 同时 match 在证书过期时还会自动从苹果官网下载新的证书并 push 到私有的 git 库中, 保证证书同步, 不得不为这个想法点赞!</div></pre></td></tr></table></figure></p>
<p>gem install match<br>xcode-select –install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### match初始化</div></pre></td></tr></table></figure></p>
<p>match init</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">命令运行时需要输入新建的用来保存证书的git地址, 运行成功后会生成 Matchfile 配置文件</div></pre></td></tr></table></figure>
<p>.<br>└── fastlane<br>    ├── Appfile<br>    ├── Fastfile<br>    ├── Matchfile<br>    └── README.md<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">接着运行下面的两条命令来生成证书和 profile</div></pre></td></tr></table></figure></p>
<p>match appstore<br>match development<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">命令运行时需要输入Apple ID 和 密码, 该密码保存在系统的 keychain 中</div><div class="line">&gt; 如果不希望用 match 重新生成证书和 profile, 可以参考[Michał Laskowski](http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#main)的博客</div><div class="line"></div><div class="line">如果当前项目的证书和 profile 比较混乱, 可以用一下两个命令来清空 Apple 官网上当前全部证书和 profile 文件</div></pre></td></tr></table></figure></p>
<p>match nuke development<br>match nuke distribution<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### match 扩展</div><div class="line">如果 Team 来了新成员, 在 clone 了项目工程后运行下面的命令后, match 就从私有证书库中下载develop 证书和 profile, 并安装到新机上, 新成员就可以调试代码了</div></pre></td></tr></table></figure></p>
<p>match development –readonly<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Jenkins 配置</div><div class="line"></div><div class="line">![jekins.png](http://upload-images.jianshu.io/upload_images/2591396-1393ffa8757aac0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line"></div><div class="line">#### 遇到的问题</div><div class="line">* 运行 match appstore 时遇到 openssl 库版本问题, 更新 openssl 库</div></pre></td></tr></table></figure></p>
<p>AfluyFileSystem:Remote afluy$ match appstore<br>[19:53:01]: Successfully loaded ‘/Users/afluy/WorkCodeIOS/Remote/fastlane/Matchfile’ 📄<br>….<br>[19:53:01]: Cloning remote git repo…<br>/Library/Ruby/Gems/2.0.0/gems/fastlane_core-0.53.0/lib/fastlane_core/command_executor.rb:46: warning: Insecure world writable dir /Users/afluy/Applications/dex2jar-2.0 in PATH, mode 040777<br>[19:53:02]: 🔓  Successfully decrypted certificates repo<br>[19:53:02]: Verifying that the certificate and profile are still valid on the Dev Portal…<br><a href="-----------------------------------------------------------------------">19:53:20</a>: 🔒  Successfully encrypted certificates repo</p>
<p><a href="-----------------------------------------------------------------------">19:53:20</a>: Connection reset by peer - SSL_connect<br><a href="-----------------------------------------------------------------------">19:53:20</a>:<br><a href="-----------------------------------------------------------------------">19:53:20</a>: SSL errors can be caused by various components on your local machine.<br><a href="-----------------------------------------------------------------------">19:53:20</a>: Apple has recently changed their servers to require TLS 1.2, which may<br><a href="-----------------------------------------------------------------------">19:53:20</a>: not be available to your system installed Ruby (2.0.0)<br><a href="-----------------------------------------------------------------------">19:53:20</a>:<br><a href="-----------------------------------------------------------------------">19:53:20</a>: The best solution is to install a new version of Ruby<br><a href="-----------------------------------------------------------------------">19:53:20</a>:<br><a href="-----------------------------------------------------------------------">19:53:20</a>: - Make sure OpenSSL is installed with Homebrew: <code>brew update &amp;&amp; brew upgrade openssl</code><br><a href="-----------------------------------------------------------------------">19:53:20</a>: - If you use system Ruby:<br><a href="-----------------------------------------------------------------------">19:53:20</a>:   - Run <code>brew update &amp;&amp; brew install ruby</code><br><a href="-----------------------------------------------------------------------">19:53:20</a>: - If you use rbenv with ruby-build:<br><a href="-----------------------------------------------------------------------">19:53:20</a>:   - Run <code>brew update &amp;&amp; brew upgrade ruby-build &amp;&amp; rbenv install ruby-2.3.1</code><br><a href="-----------------------------------------------------------------------">19:53:20</a>:   - Run <code>rbenv global ruby-2.3.1</code> to make it the new global default Ruby version<br><a href="-----------------------------------------------------------------------">19:53:20</a>: - If you use rvm:<br><a href="-----------------------------------------------------------------------">19:53:20</a>:   - First run <code>rvm osx-ssl-certs update all</code><br><a href="-----------------------------------------------------------------------">19:53:20</a>:   - Then run `rvm reinstall ruby-2.3.1 –with-openssl-dir=/usr/local<br><a href="-----------------------------------------------------------------------">19:53:20</a>:<br><a href="-----------------------------------------------------------------------">19:53:20</a>: If that doesn’t fix your issue, please google for the following error message:<br><a href="-----------------------------------------------------------------------">19:53:20</a>:   ‘Connection reset by peer - SSL_connect’</p>
<p>[!] Connection reset by peer - SSL_connect<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">* 运行 match development 时遇到 Apple 账号权限问题, 请使用可以上传 profile 的账号</div></pre></td></tr></table></figure></p>
<p>AfluyFileSystem:Remote afluy$ match development<br>[20:35:02]: Successfully loaded ‘/Users/afluy/WorkCodeIOS/Remote/fastlane/Matchfile’ 📄<br>…<br>[20:35:02]: Cloning remote git repo…<br>[20:35:03]: 🔓  Successfully decrypted certificates repo<br>[20:35:03]: Verifying that the certificate and profile are still valid on the Dev Portal…<br>[20:35:17]: Couldn’t find a valid code signing identity in the git repo for development… creating one for you now<br>…<br>[20:35:17]: Starting login with user ‘zhao.xianhua@whaley.cn’<br>[20:35:22]: Successfully logged in<br>[20:35:25]: $ security import /var/folders/_n/kyvgh8495bv5zmmdg7f85_1r0000gn/T/d20161027-57678-otquli/certs/development/K2935G9MQS.p12 -k ‘/Users/afluy/Library/Keychains/login.keychain’ -T /usr/bin/codesign -T /usr/bin/security<br>[20:35:25]: ▸ 1 key imported.<br>[20:35:25]: $ security import /var/folders/_n/kyvgh8495bv5zmmdg7f85_1r0000gn/T/d20161027-57678-otquli/certs/development/K2935G9MQS.cer -k ‘/Users/afluy/Library/Keychains/login.keychain’ -T /usr/bin/codesign -T /usr/bin/security<br>[20:35:25]: ▸ 1 certificate imported.<br>[20:35:25]: Successfully generated K2935G9MQS which was imported to the local machine.<br>security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain.<br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100  1062  100  1062    0     0    825      0  0:00:01  0:00:01 –:–:–   825<br>[20:35:28]: Verifying the certificate is properly installed locally…<br>[20:35:28]: Successfully installed certificate K2935G9MQS</p>
<p>…</p>
<p>[20:35:29]: Starting login with user ‘…’<br>[20:35:31]: Successfully logged in<br>[20:35:31]: Fetching profiles…<br>[20:35:31]: No existing profiles found, that match the certificates you have installed locally! Creating a new provisioning profile for you<br>[20:35:35]: Creating new provisioning profile for ‘…’ with name ‘match Development …’<br>[20:35:38]: An error occured while verifying your certificates and profiles with the Apple Developer Portal.<br>[20:35:38]: If you already have your certificates stored in git, you can run <code>match</code> in readonly mode<br>[20:35:38]: to just install the certificates and profiles without accessing the Dev Portal.<br>[20:35:38]: To do so, just pass <code>readonly: true</code> to your match call.<br>[20:35:38]: 🔒  Successfully encrypted certificates repo</p>
<p>Looking for related GitHub issues on fastlane/fastlane…</p>
<p>Found no similar issues. To create a new issue, please visit:<br><a href="https://github.com/fastlane/fastlane/issues/new" target="_blank" rel="external">https://github.com/fastlane/fastlane/issues/new</a></p>
<p>[!] Apple provided the following error info:<br>    You are not permitted to create provisioning profiles for team.  Please contact one of your team admins, who can create a profile on your behalf.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* Apple 官网和本地机器上已经有证书, 需要删除官网和本地的证书, 也可以运行上面说的 match nuke 命令来清空已有的证书</div></pre></td></tr></table></figure></p>
<p>AfluyFileSystem:Remote afluy$ match development<br>[10:53:48]: Successfully loaded ‘/Users/afluy/WorkCodeIOS/Remote/fastlane/Matchfile’ 📄<br>…<br>[10:53:48]: Cloning remote git repo…<br>[10:53:54]: 🔓  Successfully decrypted certificates repo<br>[10:53:54]: Verifying that the certificate and profile are still valid on the Dev Portal…<br>[10:54:00]: Couldn’t find a valid code signing identity in the git repo for development… creating one for you now<br>…<br>[10:54:00]: Starting login with user ‘zhao.xianhua@whaley.cn’<br>[10:54:02]: Successfully logged in<br>[10:54:05]: 🔒  Successfully encrypted certificates repo</p>
<p>Looking for related GitHub issues on fastlane/fastlane…</p>
<p>➡️  match: Could not create another certificate, reached the maximum number of available certificates.<br>   <a href="https://github.com/fastlane/fastlane/issues/5765" target="_blank" rel="external">https://github.com/fastlane/fastlane/issues/5765</a> [closed] 4 💬<br>   17 Aug 2016</p>
<p>➡️  Could not create another certificate, reached the maximum number of available certificates.<br>   <a href="https://github.com/fastlane/fastlane/issues/3472" target="_blank" rel="external">https://github.com/fastlane/fastlane/issues/3472</a> [closed] 9 💬<br>   5 weeks ago</p>
<p>➡️  Could not create another certificate, reached the maximum number of available certificates<br>   <a href="https://github.com/fastlane/fastlane/issues/3123" target="_blank" rel="external">https://github.com/fastlane/fastlane/issues/3123</a> [closed] 10 💬<br>   5 weeks ago</p>
<p>and 10 more at: <a href="https://github.com/fastlane/fastlane/search?q=Could%20not%20create%20another%20Development%20certificate,%20reached%20the%20maximum%20number%20of%20available%20Development%20certificates.&amp;type=Issues&amp;utf8=✓" target="_blank" rel="external">https://github.com/fastlane/fastlane/search?q=Could%20not%20create%20another%20Development%20certificate,%20reached%20the%20maximum%20number%20of%20available%20Development%20certificates.&amp;type=Issues&amp;utf8=✓</a></p>
<p>[!] Could not create another Development certificate, reached the maximum number of available Development certificates.<br>```</p>
<ul>
<li>Team 中其他开发者需要在 Xcode 中选择 Automatically manage signing</li>
<li>在 Setting up CocoaPods master repo 卡住, 这个是 CocoaPods 需要全部 clone 下来, 我最终下载了大概 700M 的文件~~</li>
<li>如果不能将改动提交到私有的存储证书的远程 git 库, 可以检查该 git 库的master分支是否被保护</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://codesigning.guide/" target="_blank" rel="external">https://codesigning.guide/</a><br><a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">https://github.com/fastlane/fastlane</a><br><a href="https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/" target="_blank" rel="external">https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/</a><br><a href="https://rvm.io/rvm/install" target="_blank" rel="external">https://rvm.io/rvm/install</a><br><a href="https://ruby-china.org/wiki/rvm-guide" target="_blank" rel="external">https://ruby-china.org/wiki/rvm-guide</a><br><a href="https://ruby-china.org/wiki/install_ruby_guide" target="_blank" rel="external">https://ruby-china.org/wiki/install_ruby_guide</a><br><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#main" target="_blank" rel="external">http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#main</a><br><a href="http://stackoverflow.com/questions/36963467/how-do-i-manually-add-existing-provisioning-profiles-and-certificates-to-fastlan" target="_blank" rel="external">http://stackoverflow.com/questions/36963467/how-do-i-manually-add-existing-provisioning-profiles-and-certificates-to-fastlan</a><br><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration" target="_blank" rel="external">http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置-fastlane-框架自动化打包发布-iOS-应用&quot;&gt;&lt;a href=&quot;#配置-fastlane-框架自动化打包发布-iOS-应用&quot; class=&quot;headerlink&quot; title=&quot;配置-fastlane-框架自动化打包发布-iOS-应用&quot;&gt;&lt;/a&gt;配置-fastlane-框架自动化打包发布-iOS-应用&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BJavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5D%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://www.afluy.site/2016/11/25/[JavaScript学习笔记]继承与原型链/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:44:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了通过构造函数创建对象之外，你也可以通过对象初始化器创建对象。<br>使用对象初始化器也被称作通过字面值创建对象。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; property_1:   &quot;value_1&quot;,   // property_# may be an identifier...</div><div class="line">            2:            &quot;value_2&quot;,   // or a number...</div><div class="line">            // ...,</div><div class="line">            &quot;property n&quot;: &quot;value_n&quot; &#125;; // or a string</div><div class="line"></div><div class="line">console.log(Object.getPrototypeOf(obj))</div><div class="line">console.log(Object.getPrototypeOf(Object.getPrototypeOf(obj))) </div><div class="line"></div><div class="line">// obj --&gt; &#123;&#125; ---&gt; null</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Car(make, model, year, owner) &#123;</div><div class="line">  this.make = make;</div><div class="line">  this.model = model;</div><div class="line">  this.year = year;</div><div class="line">  this.owner = owner;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var car1 = new Car(&quot;Eagle&quot;, &quot;Talon TSi&quot;, 1993, rand);</div><div class="line">var car2 = new Car(&quot;Nissan&quot;, &quot;300ZX&quot;, 1992, ken);</div><div class="line"></div><div class="line">car1.color = &quot;black&quot;;</div></pre></td></tr></table></figure>
<p>为 car1 增加了 color 属性，并将其值设为 “black.” 然而，这并不影响其他的对象。<br>想要为某个类型的所有对象增加新属性，必须将属性加入到 car 对象类型的定义中。</p>
<ul>
<li>所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可通过构造函数的prototype 对象找到。</li>
</ul>
<h4 id="子类和继承"><a href="#子类和继承" class="headerlink" title="子类和继承"></a>子类和继承</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model" target="_blank" rel="external">原文地址</a></p>
<p>基于类的语言是通过对类的定义中构建类的层级结构的。在类定义中，可以指定新的类是一个现存的类的子类。子类将继承父类的全部属性，并可以添加新的属性或者修改继承的属性。例如，假设 Employee 类只有 name 和 dept 属性，而 Manager 是 Employee 的子类并添加了 reports 属性。这时，Manager 类的实例将具有所有三个属性：name，dept 和 reports。</p>
<p>JavaScript 通过将构造器函数与原型对象相关联的方式来实现继承。这样，您可以创建完全一样的 Employee — Manager 示例，不过需要使用略微不同的术语。首先，定义 Employee 构造器函数，指定 name 和 dept 属性；然后，定义 Manager 构造器函数，指定 reports 属性。最后，将一个新的 Employee 对象赋值给 Manager 构造器函数的 prototype 属性。这样，当创建一个新的 Manager 对象时，它将从 Employee 对象中继承 name and dept 属性。</p>
<p><a href="http://shiningray.cn/docs/self-the-power-of-simplicity" target="_blank" rel="external">http://shiningray.cn/docs/self-the-power-of-simplicity</a><br><a href="http://www.cnblogs.com/winter-cn/archive/2009/05/16/1458390.html" target="_blank" rel="external">http://www.cnblogs.com/winter-cn/archive/2009/05/16/1458390.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了通过构造函数创建对象之外，你也可以通过对象初始化器创建对象。&lt;br&gt;使用对象初始化器也被称作通过字面值创建对象。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/CSS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.afluy.site/2016/11/25/CSS-学习笔记/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS学习笔记-基础知识"><a href="#CSS学习笔记-基础知识" class="headerlink" title="[CSS学习笔记] 基础知识"></a>[CSS学习笔记] 基础知识</h2><a id="more"></a>
<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式<br>stretch|center|flex-start|flex-end|baseline|initial|inherit</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>stretch</td>
<td>默认值。项目被拉伸以适应容器。</td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
</tr>
<tr>
<td>flex-start</td>
<td>项目位于容器的开头。</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
</tr>
<tr>
<td>baseline</td>
<td>项目位于容器的基线上。</td>
</tr>
<tr>
<td>initial</td>
<td>设置该属性为它的默认值。请参阅 initial。</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承该属性。请参阅 inherit。</td>
</tr>
</tbody>
</table>
<h4 id="元素居中显示"><a href="#元素居中显示" class="headerlink" title="元素居中显示"></a>元素居中显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">#container &#123;</div><div class="line">  display:flex;</div><div class="line">  flex-direction:row;</div><div class="line">  justify-content:center;</div><div class="line">  align-items:center;</div><div class="line">  height:200px;</div><div class="line">  width:200px;</div><div class="line">  background:#ff0000;</div><div class="line">&#125;</div><div class="line">#container div&#123;</div><div class="line">  background:#0000ff;</div><div class="line">  height:20px;</div><div class="line">  width:20px;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;container&quot;&gt;</div><div class="line">    &lt;div&gt;&lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2591396-e29d5ed34f15f213.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS学习笔记-基础知识&quot;&gt;&lt;a href=&quot;#CSS学习笔记-基础知识&quot; class=&quot;headerlink&quot; title=&quot;[CSS学习笔记] 基础知识&quot;&gt;&lt;/a&gt;[CSS学习笔记] 基础知识&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.afluy.site/2016/11/25/微信小程序示例代码/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:49:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序示例代码"><a href="#微信小程序示例代码" class="headerlink" title="微信小程序示例代码"></a>微信小程序示例代码</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var app = getApp();</div><div class="line"></div><div class="line">function get( url, params, success, error ) &#123;</div><div class="line">    if( app.debug ) &#123;</div><div class="line">        console.log( &apos;HTTPClient.get: &apos;, url, params );</div><div class="line">    &#125;</div><div class="line">    wx.request( &#123;</div><div class="line">        url: url,</div><div class="line">        data: params,</div><div class="line">        success: function( response ) &#123;</div><div class="line">            if( app.debug ) &#123;</div><div class="line">                console.log( &apos;response data: &apos;, res );</div><div class="line">            &#125;</div><div class="line">            // if( response.statusCode == 200 ) &#123;</div><div class="line">            //     success( response.data );</div><div class="line">            // &#125; else &#123;</div><div class="line">            //     error();</div><div class="line">            // &#125;</div><div class="line">            success( response.data );</div><div class="line">        &#125;,</div><div class="line">        fail: function(err) &#123;</div><div class="line">            error(err);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    get: get</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微信小程序示例代码&quot;&gt;&lt;a href=&quot;#微信小程序示例代码&quot; class=&quot;headerlink&quot; title=&quot;微信小程序示例代码&quot;&gt;&lt;/a&gt;微信小程序示例代码&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/UPnP%E8%AE%BE%E7%BD%AE%E5%88%97%E8%A1%A8/"/>
    <id>http://www.afluy.site/2016/11/25/UPnP设置列表/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UPnP设置列表"><a href="#UPnP设置列表" class="headerlink" title="UPnP设置列表"></a>UPnP设置列表</h2><a id="more"></a>
<table>
<thead>
<tr>
<th>ID</th>
<th>应用描述</th>
<th>外部端口</th>
<th>协议类型</th>
<th>内部端口</th>
<th>IP地址</th>
<th>状态 </th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>CDE-UPNP</td>
<td>1443</td>
<td>TCP</td>
<td>1443</td>
<td>192.168.1.104</td>
<td>已启用</td>
</tr>
<tr>
<td>2</td>
<td>Teredo</td>
<td>51014</td>
<td>UDP</td>
<td>51014</td>
<td>192.168.1.116</td>
<td>已启用</td>
</tr>
<tr>
<td>3</td>
<td>youku-acc</td>
<td>46356</td>
<td>UDP</td>
<td>4466</td>
<td>192.168.1.112</td>
<td>已启用</td>
</tr>
<tr>
<td>4</td>
<td>youku-acc</td>
<td>46356</td>
<td>TCP</td>
<td>4466</td>
<td>192.168.1.112</td>
<td>已启用</td>
</tr>
<tr>
<td>5</td>
<td>Xfplay9.4.0at192.168.1.114:7961</td>
<td>7961</td>
<td>UDP</td>
<td>7961</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>6</td>
<td>Xfplay9.4.0at192.168.1.114:4433</td>
<td>4433</td>
<td>TCP</td>
<td>4433</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>7</td>
<td>Xfplay9.4.0at192.168.1.114:7961</td>
<td>7961</td>
<td>TCP</td>
<td>7961</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>8</td>
<td>Thunder5</td>
<td>13593</td>
<td>UDP</td>
<td>11917</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>9</td>
<td>Thunder5</td>
<td>13593</td>
<td>TCP</td>
<td>13593</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>10</td>
<td>VideoSdk[UDP:16288]</td>
<td>16288</td>
<td>UDP</td>
<td>14948</td>
<td>192.168.1.116</td>
<td>已启用</td>
</tr>
<tr>
<td>11</td>
<td>youku-acc</td>
<td>23107</td>
<td>UDP</td>
<td>4466</td>
<td>192.168.1.104</td>
<td>已启用</td>
</tr>
<tr>
<td>12</td>
<td>youku-acc</td>
<td>23107</td>
<td>TCP</td>
<td>4466</td>
<td>192.168.1.104</td>
<td>已启用</td>
</tr>
<tr>
<td>13</td>
<td>T2Downloader0.1at192.168.1.116:</td>
<td>54223</td>
<td>UDP</td>
<td>54223</td>
<td>192.168.1.116</td>
<td>已启用</td>
</tr>
<tr>
<td>14</td>
<td>PortMap(AddedbyCP2PEngine)[UDP:</td>
<td>20926</td>
<td>UDP</td>
<td>20926</td>
<td>192.168.1.104</td>
<td>已启用</td>
</tr>
<tr>
<td>15</td>
<td>T2Downloader0.1at192.168.1.116:</td>
<td>48938</td>
<td>UDP</td>
<td>48938</td>
<td>192.168.1.116</td>
<td>已启用</td>
</tr>
<tr>
<td>16</td>
<td>T2Downloader0.1at192.168.1.116:</td>
<td>45878</td>
<td>UDP</td>
<td>45878</td>
<td>192.168.1.116</td>
<td>已启用</td>
</tr>
<tr>
<td>17</td>
<td>T2Downloader0.1at192.168.1.116:</td>
<td>48676</td>
<td>UDP</td>
<td>48676</td>
<td>192.168.1.116</td>
<td>已启用</td>
</tr>
<tr>
<td>18</td>
<td>youku-acc</td>
<td>5653</td>
<td>UDP</td>
<td>4466</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>19</td>
<td>youku-acc</td>
<td>5653</td>
<td>TCP</td>
<td>4466</td>
<td>192.168.1.114</td>
<td>已启用</td>
</tr>
<tr>
<td>20</td>
<td>PortMap(AddedbyCP2PEngine)[UDP:</td>
<td>41593</td>
<td>UDP</td>
<td>41593</td>
<td>192.168.1.104</td>
<td>已启用</td>
</tr>
<tr>
<td>21</td>
<td>Storm3</td>
<td>17215</td>
<td>UDP</td>
<td>9909</td>
<td>192.168.1.109</td>
<td>已启用</td>
</tr>
<tr>
<td>22</td>
<td>Storm3</td>
<td>17215</td>
<td>TCP</td>
<td>7909</td>
<td>192.168.1.109</td>
<td>已启用</td>
</tr>
<tr>
<td>23</td>
<td>PortMap(AddedbyCP2PEngine)[UDP:</td>
<td>63638</td>
<td>UDP</td>
<td>63638</td>
<td>192.168.1.107</td>
<td>已启用</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UPnP设置列表&quot;&gt;&lt;a href=&quot;#UPnP设置列表&quot; class=&quot;headerlink&quot; title=&quot;UPnP设置列表&quot;&gt;&lt;/a&gt;UPnP设置列表&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/%5BRxJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5D-Observable%E4%B8%8ESubscriber%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://www.afluy.site/2016/11/25/[RxJava学习笔记]-Observable与Subscriber的关系/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxJava学习笔记-Observable与Subscriber的关系"><a href="#RxJava学习笔记-Observable与Subscriber的关系" class="headerlink" title="[RxJava学习笔记]-Observable与Subscriber的关系"></a>[RxJava学习笔记]-Observable与Subscriber的关系</h2><a id="more"></a>
<h3 id="最简单的观察者模式"><a href="#最简单的观察者模式" class="headerlink" title="最简单的观察者模式"></a>最简单的观察者模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//被观察者</div><div class="line">public class Observable &#123;</div><div class="line">	public interface Listener &#123;</div><div class="line">		void call();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Observable.Listener mListener = null;</div><div class="line"></div><div class="line">    public static Observable create(Listener listener) &#123;</div><div class="line">    	mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void someMethod() &#123;</div><div class="line">		mListener.call();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建被观察者对象, 传入Observable.Listener对象</div><div class="line">Observable observable = Observable.create(new Observable.Listener() &#123;</div><div class="line"></div><div class="line">	@override</div><div class="line">	void call() &#123;</div><div class="line">	  //do something</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="抽象出来一个观察者接口-Subscriber-在调用被观察者的方法时被作为参数回调"><a href="#抽象出来一个观察者接口-Subscriber-在调用被观察者的方法时被作为参数回调" class="headerlink" title="抽象出来一个观察者接口(Subscriber), 在调用被观察者的方法时被作为参数回调"></a>抽象出来一个观察者接口(Subscriber), 在调用被观察者的方法时被作为参数回调</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Observable &#123;</div><div class="line"></div><div class="line">	public interface onSubscribe &#123;</div><div class="line">		void call(Subscriber subscriber);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	Observable.onSubscribe mOnSubscribe = null;</div><div class="line"></div><div class="line">    public static Observable create(onSubscribe pOnSubscribe) &#123;</div><div class="line">    	mOnSubscribe = pOnSubscribe;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void subscribe(Subscriber subscribe) &#123;</div><div class="line">    	mOnSubscribe.call(subscribe);  //把subscribe作为call方法的参数回调</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//观察者</div><div class="line">public interface Subscriber &#123;</div><div class="line">	void onNext(String string);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Observable observable = Observable.create(new Observable.onSubscribe() &#123;</div><div class="line"></div><div class="line">	@override</div><div class="line">	void call(Subscriber subscriber) &#123;</div><div class="line">		//do something</div><div class="line">		subscriber.next(&quot;1&quot;);</div><div class="line">		subscriber.next(&quot;2&quot;);</div><div class="line">		subscriber.next(&quot;3&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这时如果新建一个Subscriber对象, 并将它传参到observable对象的subscribe方法中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Subscriber subscriber = new Subscriber() &#123;</div><div class="line">    @override</div><div class="line">    void onNext(String string) &#123;</div><div class="line">      // 打印string</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line">observable.subscribe(subscriber);</div><div class="line"></div><div class="line">//subscriber对象打印出</div><div class="line">&quot;1&quot;</div><div class="line">&quot;2&quot;</div><div class="line">&quot;3&quot;</div></pre></td></tr></table></figure></p>
<p>将代码连贯起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.create(new Observable.onSubscribe() &#123;</div><div class="line">	@override</div><div class="line">	void call(Subscriber subscriber) &#123;</div><div class="line">		//do something</div><div class="line">		subscriber.next(&quot;1&quot;);</div><div class="line">		subscriber.next(&quot;2&quot;);</div><div class="line">		subscriber.next(&quot;3&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;).subscribe(new Subscriber() &#123;</div><div class="line">    @override</div><div class="line">    void onNext(String string) &#123;</div><div class="line">      // 打印string</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="RxJava提供了一些Observable的创建方法-不需要实现Observable-onSubscribe接口"><a href="#RxJava提供了一些Observable的创建方法-不需要实现Observable-onSubscribe接口" class="headerlink" title="RxJava提供了一些Observable的创建方法, 不需要实现Observable.onSubscribe接口"></a>RxJava提供了一些Observable的创建方法, 不需要实现Observable.onSubscribe接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(1, 2, 3, 4) </div><div class="line">.subscribe(new Action1&lt;Integer&gt;() &#123;</div><div class="line">   @Override public void call(Integer number) &#123;</div><div class="line">       Log.d(tag, &quot;number:&quot; + number);</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>其中, 在RxJava中Subscriber是Observer的子类</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RxJava学习笔记-Observable与Subscriber的关系&quot;&gt;&lt;a href=&quot;#RxJava学习笔记-Observable与Subscriber的关系&quot; class=&quot;headerlink&quot; title=&quot;[RxJava学习笔记]-Observable与Subscriber的关系&quot;&gt;&lt;/a&gt;[RxJava学习笔记]-Observable与Subscriber的关系&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/11/25/Swift%E7%89%88%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5/"/>
    <id>http://www.afluy.site/2016/11/25/Swift版知乎日报/</id>
    <published>2016-11-25T12:39:12.000Z</published>
    <updated>2016-11-25T12:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swift版知乎日报"><a href="#Swift版知乎日报" class="headerlink" title="Swift版知乎日报"></a>Swift版知乎日报</h2><h4 id="huaf22-zhihuSwiftDemo"><a href="#huaf22-zhihuSwiftDemo" class="headerlink" title="huaf22/zhihuSwiftDemo"></a><a href="https://github.com/huaf22/zhihuSwiftDemo" target="_blank" rel="external">huaf22/zhihuSwiftDemo</a></h4><a id="more"></a>
<h3 id="已实现的功能"><a href="#已实现的功能" class="headerlink" title="已实现的功能"></a>已实现的功能</h3><ul>
<li>首页左滑菜单界面</li>
<li>文章详情界面</li>
<li>文章详情界面上下切换的动画</li>
<li>主题文章界面</li>
</ul>
<h3 id="待实现的功能"><a href="#待实现的功能" class="headerlink" title="待实现的功能"></a>待实现的功能</h3><ul>
<li>文章后台缓存功能</li>
<li>首页海报获取更新</li>
<li>滑动菜单界面的优化</li>
<li>bugs</li>
<li>…</li>
</ul>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="http://upload-images.jianshu.io/upload_images/2591396-5e2ea272c2b848aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2591396-15aae9a0bc306296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2591396-92ceee53addefaa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2591396-cbeeac86bad78861.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">├── AppDelegate.swift</div><div class="line">├── BCComponents</div><div class="line">│   ├── Article</div><div class="line">│   │   ├── View</div><div class="line">│   │   │   ├── WLYArticleDetailCell.swift</div><div class="line">│   │   │   ├── WLYArticleDetailRefreshView.swift</div><div class="line">│   │   │   ├── WLYArticleDetailToolBarView.swift</div><div class="line">│   │   │   ├── WLYArticleNavigationBar.swift</div><div class="line">│   │   │   └── WLYArticleTableViewCell.swift</div><div class="line">│   │   ├── WLYArticleChannelViewController.swift</div><div class="line">│   │   ├── WLYArticleDetailCollectionViewController.swift</div><div class="line">│   │   └── WLYArticleListViewController.swift</div><div class="line">│   └── Home</div><div class="line">│       ├── View</div><div class="line">│       │   ├── HomeSideMenuFooterView.swift</div><div class="line">│       │   └── HomeSideMenuHeaderView.swift</div><div class="line">│       └── WLYHomeMenuViewController.swift</div><div class="line">├── Library</div><div class="line">│   ├── ArticleHTMLParser.swift</div><div class="line">│   ├── UIKit</div><div class="line">│   │   ├── UIColor+WLYCommon.swift</div><div class="line">│   │   ├── UIColor+WLYExtension.swift</div><div class="line">│   │   ├── UIScrollView+WLYPanGestureAllowEventPass.swift</div><div class="line">│   │   └── UIView+WLYExtension.swift</div><div class="line">│   ├── URLArrayTransform.swift</div><div class="line">│   ├── Vendors</div><div class="line">│   └── WLYLog.swift</div><div class="line">├── Models</div><div class="line">│   ├── WLYArticle.swift</div><div class="line">│   ├── WLYArticleDetail.swift</div><div class="line">│   ├── WLYArticleTheme.swift</div><div class="line">│   ├── WLYArticleThemeResult.swift</div><div class="line">│   ├── WLYDailyArticle.swift</div><div class="line">│   ├── WLYEditor.swift</div><div class="line">│   └── WLYThemeArticles.swift</div><div class="line">├── Services</div><div class="line">│   ├── ArticleService.swift</div><div class="line">│   ├── BaseServiceAPI.swift</div><div class="line">│   └── WLYArticleCacheService.swift</div><div class="line">├── ViewControllers</div><div class="line">│   ├── WLYSideMenuViewController.swift</div><div class="line">│   ├── WLYTableViewController.swift</div><div class="line">│   └── WLYViewController.swift</div><div class="line">└── Views</div><div class="line">    ├── UIScrollView+WLYPullToRefresh.swift</div><div class="line">    ├── WLYHorizontalLayoutButton.swift</div><div class="line">    ├── WLYPullToRefreshView.swift</div><div class="line">    ├── WLYRefreshLoadingView.swift</div><div class="line">    ├── WLYScrollImageView.swift</div><div class="line">    ├── WLYTableViewCell.swift</div><div class="line">    └── WLYVerticalLayoutButton.swift</div></pre></td></tr></table></figure>
<h3 id="知乎日报-API"><a href="#知乎日报-API" class="headerlink" title="知乎日报 API"></a>知乎日报 API</h3><p><a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">izzyleung/ZhihuDailyPurify</a></p>
<h3 id="使用的开源库"><a href="#使用的开源库" class="headerlink" title="使用的开源库"></a>使用的开源库</h3><ul>
<li><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="external">SnapKit</a></li>
<li><a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="external">Kingfisher</a></li>
<li><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></li>
<li><a href="https://github.com/tristanhimmelman/AlamofireObjectMapper" target="_blank" rel="external">AlamofireObjectMapper</a></li>
<li><a href="https://github.com/DaveWoodCom/XCGLogger" target="_blank" rel="external">XCGLogger</a></li>
</ul>
<p>Thanks to all of you</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Swift版知乎日报&quot;&gt;&lt;a href=&quot;#Swift版知乎日报&quot; class=&quot;headerlink&quot; title=&quot;Swift版知乎日报&quot;&gt;&lt;/a&gt;Swift版知乎日报&lt;/h2&gt;&lt;h4 id=&quot;huaf22-zhihuSwiftDemo&quot;&gt;&lt;a href=&quot;#huaf22-zhihuSwiftDemo&quot; class=&quot;headerlink&quot; title=&quot;huaf22/zhihuSwiftDemo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/huaf22/zhihuSwiftDemo&quot;&gt;huaf22/zhihuSwiftDemo&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.afluy.site/2016/08/11/%5BiOS%E7%AC%94%E8%AE%B0%5Dswift%E4%B8%AD%E7%9A%84optional%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.afluy.site/2016/08/11/[iOS笔记]swift中的optional类型/</id>
    <published>2016-08-11T12:28:06.000Z</published>
    <updated>2016-11-25T12:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS笔记-Swift中的Optional类型-可选类型"><a href="#iOS笔记-Swift中的Optional类型-可选类型" class="headerlink" title="[iOS笔记]Swift中的Optional类型 (可选类型)"></a>[iOS笔记]Swift中的Optional类型 (可选类型)</h1><a id="more"></a>
<h3 id="Optional类型表示-有值-没有值"><a href="#Optional类型表示-有值-没有值" class="headerlink" title="Optional类型表示: 有值 / 没有值"></a>Optional类型表示: 有值 / 没有值</h3><p>在Objective-C中并没有Optional类型, 只有nil,并且nil只能用于表示对象类型无值,</p>
<p>并不能用于基础类型(int, float),枚举和结构体,基础类型需要返回类似NSNotFound的特殊值来表示无值,</p>
<p>所以在Swift中定义了Optinal类型来表示各种类型的无值状态,并规定了nil不能用于非可选的常量和变量,只能用于Optinal类型</p>
<h3 id="先看一下基本的用法"><a href="#先看一下基本的用法" class="headerlink" title="先看一下基本的用法:"></a>先看一下基本的用法:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var serverResponseCode: Int? = nil</div><div class="line">// serverResponseCode 现在不包含值</div><div class="line"></div><div class="line">serverResponseCode = 404</div><div class="line">// serverResponseCode 包含一个可选的 Int 值 404 </div><div class="line">Int? 表示serverResponseCode可以是有值的也可以是无值的</div><div class="line"></div><div class="line">var surveyAnswer: String?</div><div class="line">//surveyAnswer 被自动设置为 nil</div></pre></td></tr></table></figure>
<h3 id="在if语法中的用法"><a href="#在if语法中的用法" class="headerlink" title="在if语法中的用法"></a>在if语法中的用法</h3><p>使用 if 语句和 nil 来判断一个Optional类型是否有值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var convertedNumber: Int? </div><div class="line"></div><div class="line">if convertedNumber != nil &#123;</div><div class="line">     print(&quot;convertedNumber contains some integer value.&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可选绑定-optional-binding"><a href="#可选绑定-optional-binding" class="headerlink" title="可选绑定( optional binding )"></a>可选绑定( optional binding )</h3><p>使用optional binding来判断optional类型是否有值,并且如果有值就把值赋给一个常量或者临时变量。</p>
<p>optional binding可以用在 if 和  while 语句中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if let constantName = someOptional &#123;</div><div class="line">     print(&quot;get the value: \(constantName)&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//如果someOptional这个optional类型有值,创建一个叫做constantName的常量并将someOptional包含的值赋给它。</div><div class="line">//并且因为constantName已经被optional类型包含的值初始化过,所以不需要再使用 ! 后缀来获取它的值。</div></pre></td></tr></table></figure>
<h3 id="强制解析-解包-forced-unwrapping"><a href="#强制解析-解包-forced-unwrapping" class="headerlink" title="强制解析/解包 ( forced unwrapping )"></a>强制解析/解包 ( forced unwrapping )</h3><p>当确定可选类型确实包含值之后,可以在可选的名字后面加一个感叹号( ! )来获取值;</p>
<p>当Option == nil时,使用 ! 来获取会导致运行时错误。所以使用 ! 来强制解析值之前,一定要确定Option类型不是nil的</p>
<h3 id="隐式解析可选类型-implicitly-unwrapped-optionals"><a href="#隐式解析可选类型-implicitly-unwrapped-optionals" class="headerlink" title="隐式解析可选类型 ( implicitly unwrapped optionals )"></a>隐式解析可选类型 ( implicitly unwrapped optionals )</h3><p>有时候在编写程序中,一个optional类型第一次被赋值后,可以确定它以后总会有值,</p>
<p>在这种情况下,使用它时每次都还需要判断和解包optional类型是非常低效的,因为可以确定它总会有值,</p>
<p>所以Swift中定义了一个隐式解析可选类型,它在使用时可以自动解析;</p>
<p>把( String? )改成感叹号( String! )就可以声明一个隐式解析可选类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let possibleString: String? = &quot;An optional string.&quot;</div><div class="line">let forcedString: String = possibleString! // 需要惊叹号来获取值</div><div class="line"></div><div class="line">let assumedString: String! = &quot;An implicitly unwrapped optional string.&quot; </div><div class="line">let implicitString: String = assumedString // 不需要感叹号</div></pre></td></tr></table></figure>
<p>但是需要注意:</p>
<ul>
<li><p>如果你在隐式解析可选类型没有值的时候取值,会触发运行时错误,</p>
<p>这和你在无值的普通Optional类型后面加一个惊叹号的情景一样;</p>
</li>
</ul>
<ul>
<li><p>如果一个变量以后还可能变成 nil 的话,不要使用隐式解析可选类型;</p>
</li>
<li><p>并且如果需要在变量的生命周期中判断是否 是 nil 的话,请使用普通可选类型;</p>
</li>
</ul>
<h4 id="可以理解为隐式解析可选类型用于声明初始化时可能为nil-但之后会立刻被赋值-并且不会再变成nil的Optional类型对象"><a href="#可以理解为隐式解析可选类型用于声明初始化时可能为nil-但之后会立刻被赋值-并且不会再变成nil的Optional类型对象" class="headerlink" title="可以理解为隐式解析可选类型用于声明初始化时可能为nil,但之后会立刻被赋值,并且不会再变成nil的Optional类型对象"></a>可以理解为隐式解析可选类型用于声明初始化时可能为nil,但之后会立刻被赋值,并且不会再变成nil的Optional类型对象</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS笔记-Swift中的Optional类型-可选类型&quot;&gt;&lt;a href=&quot;#iOS笔记-Swift中的Optional类型-可选类型&quot; class=&quot;headerlink&quot; title=&quot;[iOS笔记]Swift中的Optional类型 (可选类型)&quot;&gt;&lt;/a&gt;[iOS笔记]Swift中的Optional类型 (可选类型)&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
